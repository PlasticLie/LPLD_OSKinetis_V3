###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     16/Feb/2014  17:24:02 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_MCG.c     #
#    Command line =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_MCG.c -D  #
#                    LPLD_K60 -lCN "C:\embed\LPLD\LPLD_OSKinetis_V3\project\0 #
#                    5-(UARTint)LPLD_SerialInterrupt\iar\RAM\List\" -lB       #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\RAM\List\" -o                      #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\RAM\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(U #
#                    ARTint)LPLD_SerialInterrupt\iar\..\app\" -I              #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\CPU\" -I              #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\common\" -I           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\LPLD\" -I             #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\LPLD\HW\" -I          #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\LPLD\DEV\" -I         #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\uCOS-II\Ports\" -I    #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\uCOS-II\Source\" -I   #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\FatFs\" -I            #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\FatFs\option\" -I     #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\USB\common\" -I       #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\USB\driver\" -I       #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\USB\descriptor\" -I   #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPL #
#                    D_SerialInterrupt\iar\..\..\..\lib\USB\class\" -Ol -I    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\" -D ARM_MATH_CM4                  #
#    List file    =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPLD #
#                    _SerialInterrupt\iar\RAM\List\HW_MCG.lst                 #
#    Object file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\05-(UARTint)LPLD #
#                    _SerialInterrupt\iar\RAM\Obj\HW_MCG.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_MCG.c
      1          /**
      2           * @file HW_MCG.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief MCG底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "HW_MCG.h"
     24          
     25          

   \                                 In section .data, align 4
     26          uint32 g_core_clock = -1ul;
   \                     g_core_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     27          uint32 g_bus_clock = -1ul;
   \                     g_bus_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     28          uint32 g_flash_clock = -1ul;
   \                     g_flash_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     29          uint32 g_flexbus_clock = -1ul;
   \                     g_flexbus_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295
     30          
     31          /*
     32           * LPLD_PLL_Setup
     33           * 初始化内核时钟及其他系统时钟
     34           * 
     35           * 参数:
     36           *    core_clk_mhz--期望内核时钟频率
     37           *      |__PLLx--参见HAL_MCG.h中的PLL_option定义
     38           *
     39           * 输出:
     40           *    内核频率，单位MHz
     41           */

   \                                 In section .text, align 4, keep-with-next
     42          uint8 LPLD_PLL_Setup(PllOptionEnum_Type core_clk_mhz)
     43          {
   \                     LPLD_PLL_Setup:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     44            uint8 pll_freq;
     45            uint8 prdiv, vdiv;
     46            uint8 core_div, bus_div, flexbus_div, flash_div;
     47            
     48          /*
     49           *************************************************
     50            【LPLD注解】MCG关键系数
     51            prdiv(PLL分频系数): 0~31(1~32)
     52            vdiv(PLL倍频系数): 0~31(24~55)
     53            PLL参考时钟范围: 2MHz~4MHz
     54            PLL参考时钟 = 外部参考时钟(CPU_XTAL_CLK_HZ)/prdiv
     55            CoreClk = PLL参考时钟 x PLL倍频系数 /OUTDIV1
     56           *************************************************
     57           */
     58            
     59            // 对于MK60DZ10来说，core_clk_mhz建议不要超过100，这里限制为最高200
     60            core_clk_mhz = (PllOptionEnum_Type)(core_clk_mhz>200u?200u:core_clk_mhz);
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x28C9             CMP      R0,#+201
   \   00000006   0xD301             BCC.N    ??LPLD_PLL_Setup_0
   \   00000008   0x20C8             MOVS     R0,#+200
   \   0000000A   0xE7FF             B.N      ??LPLD_PLL_Setup_1
     61            
     62            // 根据期望主频选择分频和倍频系数
     63            //对K60FX和K60DN进行区分设置
     64          // (CPU_MK60DZ10)
     65            switch(core_clk_mhz)
   \                     ??LPLD_PLL_Setup_0:
   \                     ??LPLD_PLL_Setup_1:
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x0001             MOVS     R1,R0
   \   00000010   0x2930             CMP      R1,#+48
   \   00000012   0xD00E             BEQ.N    ??LPLD_PLL_Setup_2
   \   00000014   0x2932             CMP      R1,#+50
   \   00000016   0xD02C             BEQ.N    ??LPLD_PLL_Setup_3
   \   00000018   0x2960             CMP      R1,#+96
   \   0000001A   0xD02D             BEQ.N    ??LPLD_PLL_Setup_4
   \   0000001C   0x2964             CMP      R1,#+100
   \   0000001E   0xD02E             BEQ.N    ??LPLD_PLL_Setup_5
   \   00000020   0x2978             CMP      R1,#+120
   \   00000022   0xD02F             BEQ.N    ??LPLD_PLL_Setup_6
   \   00000024   0x2996             CMP      R1,#+150
   \   00000026   0xD030             BEQ.N    ??LPLD_PLL_Setup_7
   \   00000028   0x29B4             CMP      R1,#+180
   \   0000002A   0xD031             BEQ.N    ??LPLD_PLL_Setup_8
   \   0000002C   0x29C8             CMP      R1,#+200
   \   0000002E   0xD032             BEQ.N    ??LPLD_PLL_Setup_9
   \   00000030   0xE034             B.N      ??LPLD_PLL_Setup_10
     66            {
     67            case PLL_48:
     68              prdiv = 24u;
   \                     ??LPLD_PLL_Setup_2:
   \   00000032   0x2718             MOVS     R7,#+24
     69              vdiv = 0u;
   \   00000034   0x2500             MOVS     R5,#+0
     70              break;
     71            case PLL_50:
     72              prdiv = 24u;
     73              vdiv = 1u;
     74              break;
     75            case PLL_96:
     76              prdiv = 24u;
     77              vdiv = 24u;
     78              break;
     79            case PLL_100:
     80              prdiv = 24u;
     81              vdiv = 26u;
     82              break;
     83            case PLL_120:
     84              prdiv = 19u;
     85              vdiv = 24u;
     86              break;
     87            case PLL_150:
     88              prdiv = 15u;
     89              vdiv = 24u;
     90              break;
     91            case PLL_180:
     92              prdiv = 14u;
     93              vdiv = 30u;
     94              break;
     95            case PLL_200:
     96              prdiv = 12u;
     97              vdiv = 28u;
     98              break;
     99            default:
    100              return LPLD_PLL_Setup(PLL_96);
    101            }
    102          #if defined(CPU_MK60FX15_ADD)
    103             switch(core_clk_mhz)
   \                     ??LPLD_PLL_Setup_11:
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x0001             MOVS     R1,R0
   \   0000003A   0x2932             CMP      R1,#+50
   \   0000003C   0xD00A             BEQ.N    ??LPLD_PLL_Setup_12
   \   0000003E   0x2964             CMP      R1,#+100
   \   00000040   0xD030             BEQ.N    ??LPLD_PLL_Setup_13
   \   00000042   0x2978             CMP      R1,#+120
   \   00000044   0xD031             BEQ.N    ??LPLD_PLL_Setup_14
   \   00000046   0x2996             CMP      R1,#+150
   \   00000048   0xD032             BEQ.N    ??LPLD_PLL_Setup_15
   \   0000004A   0x29B4             CMP      R1,#+180
   \   0000004C   0xD033             BEQ.N    ??LPLD_PLL_Setup_16
   \   0000004E   0x29C8             CMP      R1,#+200
   \   00000050   0xD034             BEQ.N    ??LPLD_PLL_Setup_17
   \   00000052   0xE036             B.N      ??LPLD_PLL_Setup_18
    104            {
    105            case PLL_50:
    106              prdiv = 7u;
   \                     ??LPLD_PLL_Setup_12:
   \   00000054   0x2707             MOVS     R7,#+7
    107              vdiv = 1u;
   \   00000056   0x2501             MOVS     R5,#+1
    108              break;
    109            case PLL_100:
    110              prdiv = 7u;
    111              vdiv = 16u;
    112              break;
    113            case PLL_120:
    114              prdiv = 4u;
    115              vdiv = 8u;
    116              break;
    117            case PLL_150:
    118              prdiv = 4u;
    119              vdiv = 14u;
    120              break;
    121            case PLL_180:
    122              prdiv = 4u;
    123              vdiv = 20u;
    124              break;
    125            case PLL_200:
    126              prdiv = 4u;
    127              vdiv = 24u;
    128              break;
    129            default:
    130              return LPLD_PLL_Setup(PLL_120);
    131            }
    132          #endif
    133            
    134            pll_freq = core_clk_mhz * 1;
   \                     ??LPLD_PLL_Setup_19:
   \   00000058   0x0006             MOVS     R6,R0
    135            core_div = 0;
   \   0000005A   0x2400             MOVS     R4,#+0
    136            if((bus_div = (uint8)(core_clk_mhz/BUS_CLK_MHZ - 1u)) == (uint8)-1)
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x2132             MOVS     R1,#+50
   \   00000060   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000064   0x1E49             SUBS     R1,R1,#+1
   \   00000066   0x000A             MOVS     R2,R1
   \   00000068   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006A   0x2AFF             CMP      R2,#+255
   \   0000006C   0xD12D             BNE.N    ??LPLD_PLL_Setup_20
    137            {
    138              bus_div = 0;
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0xE033             B.N      ??LPLD_PLL_Setup_21
    139            }
   \                     ??LPLD_PLL_Setup_3:
   \   00000072   0x2718             MOVS     R7,#+24
   \   00000074   0x2501             MOVS     R5,#+1
   \   00000076   0xE7DE             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_4:
   \   00000078   0x2718             MOVS     R7,#+24
   \   0000007A   0x2518             MOVS     R5,#+24
   \   0000007C   0xE7DB             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_5:
   \   0000007E   0x2718             MOVS     R7,#+24
   \   00000080   0x251A             MOVS     R5,#+26
   \   00000082   0xE7D8             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_6:
   \   00000084   0x2713             MOVS     R7,#+19
   \   00000086   0x2518             MOVS     R5,#+24
   \   00000088   0xE7D5             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_7:
   \   0000008A   0x270F             MOVS     R7,#+15
   \   0000008C   0x2518             MOVS     R5,#+24
   \   0000008E   0xE7D2             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_8:
   \   00000090   0x270E             MOVS     R7,#+14
   \   00000092   0x251E             MOVS     R5,#+30
   \   00000094   0xE7CF             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_9:
   \   00000096   0x270C             MOVS     R7,#+12
   \   00000098   0x251C             MOVS     R5,#+28
   \   0000009A   0xE7CC             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_10:
   \   0000009C   0x2060             MOVS     R0,#+96
   \   0000009E   0xF7FF 0xFFAF      BL       LPLD_PLL_Setup
   \   000000A2   0xE093             B.N      ??LPLD_PLL_Setup_22
   \                     ??LPLD_PLL_Setup_13:
   \   000000A4   0x2707             MOVS     R7,#+7
   \   000000A6   0x2510             MOVS     R5,#+16
   \   000000A8   0xE7D6             B.N      ??LPLD_PLL_Setup_19
   \                     ??LPLD_PLL_Setup_14:
   \   000000AA   0x2704             MOVS     R7,#+4
   \   000000AC   0x2508             MOVS     R5,#+8
   \   000000AE   0xE7D3             B.N      ??LPLD_PLL_Setup_19
   \                     ??LPLD_PLL_Setup_15:
   \   000000B0   0x2704             MOVS     R7,#+4
   \   000000B2   0x250E             MOVS     R5,#+14
   \   000000B4   0xE7D0             B.N      ??LPLD_PLL_Setup_19
   \                     ??LPLD_PLL_Setup_16:
   \   000000B6   0x2704             MOVS     R7,#+4
   \   000000B8   0x2514             MOVS     R5,#+20
   \   000000BA   0xE7CD             B.N      ??LPLD_PLL_Setup_19
   \                     ??LPLD_PLL_Setup_17:
   \   000000BC   0x2704             MOVS     R7,#+4
   \   000000BE   0x2518             MOVS     R5,#+24
   \   000000C0   0xE7CA             B.N      ??LPLD_PLL_Setup_19
   \                     ??LPLD_PLL_Setup_18:
   \   000000C2   0x2078             MOVS     R0,#+120
   \   000000C4   0xF7FF 0xFF9C      BL       LPLD_PLL_Setup
   \   000000C8   0xE080             B.N      ??LPLD_PLL_Setup_22
    140            else if(core_clk_mhz/(bus_div+1) > BUS_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_20:
   \   000000CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CE   0x1C4A             ADDS     R2,R1,#+1
   \   000000D0   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   000000D4   0x2A33             CMP      R2,#+51
   \   000000D6   0xD300             BCC.N    ??LPLD_PLL_Setup_21
    141            {
    142              bus_div += 1;
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
    143            }
    144            if((flexbus_div = (core_clk_mhz/FLEXBUS_CLK_MHZ - 1u)) == (uint8)-1)
   \                     ??LPLD_PLL_Setup_21:
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x2232             MOVS     R2,#+50
   \   000000DE   0xFBB0 0xF2F2      UDIV     R2,R0,R2
   \   000000E2   0x1E52             SUBS     R2,R2,#+1
   \   000000E4   0x0013             MOVS     R3,R2
   \   000000E6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000E8   0x2BFF             CMP      R3,#+255
   \   000000EA   0xD101             BNE.N    ??LPLD_PLL_Setup_23
    145            {
    146              flexbus_div = 0;
   \   000000EC   0x2200             MOVS     R2,#+0
   \   000000EE   0xE007             B.N      ??LPLD_PLL_Setup_24
    147            }
    148            else if(core_clk_mhz/(flexbus_div+1) > FLEXBUS_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_23:
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F4   0x1C53             ADDS     R3,R2,#+1
   \   000000F6   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \   000000FA   0x2B33             CMP      R3,#+51
   \   000000FC   0xD300             BCC.N    ??LPLD_PLL_Setup_24
    149            {
    150              flexbus_div += 1;
   \   000000FE   0x1C52             ADDS     R2,R2,#+1
    151            }
    152            if((flash_div = (core_clk_mhz/FLASH_CLK_MHZ - 1u)) == (uint8)-1)
   \                     ??LPLD_PLL_Setup_24:
   \   00000100   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000102   0x2319             MOVS     R3,#+25
   \   00000104   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   00000108   0x1E5B             SUBS     R3,R3,#+1
   \   0000010A   0x469C             MOV      R12,R3
   \   0000010C   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000110   0xF1BC 0x0FFF      CMP      R12,#+255
   \   00000114   0xD101             BNE.N    ??LPLD_PLL_Setup_25
    153            {
    154              flash_div = 0;
   \   00000116   0x2300             MOVS     R3,#+0
   \   00000118   0xE008             B.N      ??LPLD_PLL_Setup_26
    155            }
    156            else if(core_clk_mhz/(flash_div+1) > FLASH_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_25:
   \   0000011A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000011E   0xF113 0x0C01      ADDS     R12,R3,#+1
   \   00000122   0xFB90 0xF0FC      SDIV     R0,R0,R12
   \   00000126   0x281A             CMP      R0,#+26
   \   00000128   0xD300             BCC.N    ??LPLD_PLL_Setup_26
    157            {
    158              flash_div += 1;
   \   0000012A   0x1C5B             ADDS     R3,R3,#+1
    159            }
    160            
    161            // 这里假设复位后 MCG 模块默认为 FEI 模式
    162            
    163            // 首先移动到 FBE 模式
    164            MCG->C2 = 0;
   \                     ??LPLD_PLL_Setup_26:
   \   0000012C   0x4828             LDR.N    R0,??LPLD_PLL_Setup_27  ;; 0x40064001
   \   0000012E   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000132   0xF880 0xC000      STRB     R12,[R0, #+0]
    165            
    166            // 振荡器初始化完成后,释放锁存状态下的 oscillator 和 GPIO 
    167            SIM->SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   00000136   0x4827             LDR.N    R0,??LPLD_PLL_Setup_27+0x4  ;; 0x40048034
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000013E   0xF8DF 0xC094      LDR.W    R12,??LPLD_PLL_Setup_27+0x4  ;; 0x40048034
   \   00000142   0xF8CC 0x0000      STR      R0,[R12, #+0]
    168            LLWU->CS |= LLWU_CS_ACKISO_MASK;
   \   00000146   0x4824             LDR.N    R0,??LPLD_PLL_Setup_27+0x8  ;; 0x4007c008
   \   00000148   0x7800             LDRB     R0,[R0, #+0]
   \   0000014A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000014E   0xF8DF 0xC088      LDR.W    R12,??LPLD_PLL_Setup_27+0x8  ;; 0x4007c008
   \   00000152   0xF88C 0x0000      STRB     R0,[R12, #+0]
    169            
    170            // 选择外部 oscilator 、参考分频器 and 清零 IREFS 启动外部osc
    171            // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    172            MCG->C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);  
   \   00000156   0x4821             LDR.N    R0,??LPLD_PLL_Setup_27+0xC  ;; 0x40064000
   \   00000158   0xF05F 0x0C98      MOVS     R12,#+152
   \   0000015C   0xF880 0xC000      STRB     R12,[R0, #+0]
    173            
    174            while (MCG->S & MCG_S_IREFST_MASK){}; // 等待参考时钟清零
   \                     ??LPLD_PLL_Setup_28:
   \   00000160   0x481F             LDR.N    R0,??LPLD_PLL_Setup_27+0x10  ;; 0x40064006
   \   00000162   0x7800             LDRB     R0,[R0, #+0]
   \   00000164   0x06C0             LSLS     R0,R0,#+27
   \   00000166   0xD4FB             BMI.N    ??LPLD_PLL_Setup_28
    175            
    176            while (((MCG->S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; // 等待时钟状态显示为外部参考时钟(ext ref clk)
   \                     ??LPLD_PLL_Setup_29:
   \   00000168   0x481D             LDR.N    R0,??LPLD_PLL_Setup_27+0x10  ;; 0x40064006
   \   0000016A   0x7800             LDRB     R0,[R0, #+0]
   \   0000016C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000170   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000172   0x2802             CMP      R0,#+2
   \   00000174   0xD1F8             BNE.N    ??LPLD_PLL_Setup_29
    177            
    178            // 进入FBE模式
    179            // 配置 PLL 参考分频器, PLLCLKEN=0, PLLSTEN=0, PRDIV=5
    180            // 用晶振频率来选择 PRDIV 值. 仅在有频率晶振的时候支持
    181            // 产生 2MHz 的参考时钟给 PLL.
    182            MCG->C5 = MCG_C5_PRDIV(prdiv); // 设置 PLL 匹配晶振的参考分频数 
   \   00000176   0xF017 0x001F      ANDS     R0,R7,#0x1F
   \   0000017A   0x4F1A             LDR.N    R7,??LPLD_PLL_Setup_27+0x14  ;; 0x40064004
   \   0000017C   0x7038             STRB     R0,[R7, #+0]
    183            
    184            // 确保MCG_C6处于复位状态,禁止LOLIE、PLL、和时钟控制器,清PLL VCO分频器
    185            MCG->C6 = 0x0;
   \   0000017E   0x481A             LDR.N    R0,??LPLD_PLL_Setup_27+0x18  ;; 0x40064005
   \   00000180   0x2700             MOVS     R7,#+0
   \   00000182   0x7007             STRB     R7,[R0, #+0]
    186            
    187            //设置系统时钟分频系数
    188            LPLD_Set_SYS_DIV(core_div, bus_div, flexbus_div, flash_div);  
   \   00000184   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000186   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000188   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000018A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000018C   0x0020             MOVS     R0,R4
   \   0000018E   0x.... 0x....      BL       LPLD_Set_SYS_DIV
    189           // LPLD_Set_SYS_DIV(0, 1, 4, 4);  
    190            
    191            //设置倍频系数
    192            MCG->C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(vdiv); 
   \   00000192   0xF015 0x001F      ANDS     R0,R5,#0x1F
   \   00000196   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000019A   0x4913             LDR.N    R1,??LPLD_PLL_Setup_27+0x18  ;; 0x40064005
   \   0000019C   0x7008             STRB     R0,[R1, #+0]
    193            
    194            while (!(MCG->S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??LPLD_PLL_Setup_30:
   \   0000019E   0x4810             LDR.N    R0,??LPLD_PLL_Setup_27+0x10  ;; 0x40064006
   \   000001A0   0x7800             LDRB     R0,[R0, #+0]
   \   000001A2   0x0680             LSLS     R0,R0,#+26
   \   000001A4   0xD5FB             BPL.N    ??LPLD_PLL_Setup_30
    195            
    196            while (!(MCG->S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??LPLD_PLL_Setup_31:
   \   000001A6   0x480E             LDR.N    R0,??LPLD_PLL_Setup_27+0x10  ;; 0x40064006
   \   000001A8   0x7800             LDRB     R0,[R0, #+0]
   \   000001AA   0x0640             LSLS     R0,R0,#+25
   \   000001AC   0xD5FB             BPL.N    ??LPLD_PLL_Setup_31
    197            
    198            // 已经进入PBE模式
    199            
    200            // Transition into PEE by setting CLKS to 0
    201            // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    202            MCG->C1 &= ~MCG_C1_CLKS_MASK;
   \   000001AE   0x480B             LDR.N    R0,??LPLD_PLL_Setup_27+0xC  ;; 0x40064000
   \   000001B0   0x7800             LDRB     R0,[R0, #+0]
   \   000001B2   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000001B6   0x4909             LDR.N    R1,??LPLD_PLL_Setup_27+0xC  ;; 0x40064000
   \   000001B8   0x7008             STRB     R0,[R1, #+0]
    203            
    204            // Wait for clock status bits to update
    205            while (((MCG->S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??LPLD_PLL_Setup_32:
   \   000001BA   0x4809             LDR.N    R0,??LPLD_PLL_Setup_27+0x10  ;; 0x40064006
   \   000001BC   0x7800             LDRB     R0,[R0, #+0]
   \   000001BE   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000001C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C4   0x2803             CMP      R0,#+3
   \   000001C6   0xD1F8             BNE.N    ??LPLD_PLL_Setup_32
    206            
    207            // 已经进入PEE模式
    208            
    209            return pll_freq;
   \   000001C8   0x0030             MOVS     R0,R6
   \   000001CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_PLL_Setup_22:
   \   000001CC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \   000001CE   0xBF00             Nop      
   \                     ??LPLD_PLL_Setup_27:
   \   000001D0   0x40064001         DC32     0x40064001
   \   000001D4   0x40048034         DC32     0x40048034
   \   000001D8   0x4007C008         DC32     0x4007c008
   \   000001DC   0x40064000         DC32     0x40064000
   \   000001E0   0x40064006         DC32     0x40064006
   \   000001E4   0x40064004         DC32     0x40064004
   \   000001E8   0x40064005         DC32     0x40064005
    210          } 
    211          
    212          
    213          /*
    214           * LPLD_Set_SYS_DIV
    215           * 设置系统始终分频
    216           *
    217           * 说明:
    218           * 这段代码必须放置在RAM中，目的是防止程序跑飞，详见官方文档errata e2448.
    219           * 当Flash时钟分频改变的时候，Flash预读取必须禁用.
    220           * 禁止从Flash中运行以下代码.
    221           * 在预读取被重新使能之前必须在时钟分频改变后有一段小的延时.
    222           *
    223           * 参数:
    224           *    outdiv1~outdiv4--分别为core, bus, FlexBus, Flash时钟分频系数
    225           */

   \                                 In section .textrw, align 4, keep-with-next
    226          RAMFUNC void LPLD_Set_SYS_DIV(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    227          {
   \                     LPLD_Set_SYS_DIV:
   \   00000000   0xB470             PUSH     {R4-R6}
    228            uint32 temp_reg;
    229            uint8 i;
    230            
    231            temp_reg = FMC->PFAPR; // 备份 FMC_PFAPR 寄存器
   \   00000002   0x4C10             LDR.N    R4,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000004   0x6824             LDR      R4,[R4, #+0]
    232            
    233            // 设置 M0PFD 到 M7PFD 为 1 禁用预先读取
    234            FMC->PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    235                       | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    236                       | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000006   0x4D0F             LDR.N    R5,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0xF455 0x057F      ORRS     R5,R5,#0xFF0000
   \   0000000E   0x4E0D             LDR.N    R6,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000010   0x6035             STR      R5,[R6, #+0]
    237            
    238            // 设置时钟分频为期望值  
    239            SIM->CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    240                        | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000012   0x0609             LSLS     R1,R1,#+24
   \   00000014   0xF011 0x6170      ANDS     R1,R1,#0xF000000
   \   00000018   0xEA51 0x7000      ORRS     R0,R1,R0, LSL #+28
   \   0000001C   0x0511             LSLS     R1,R2,#+20
   \   0000001E   0xF411 0x0170      ANDS     R1,R1,#0xF00000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x0419             LSLS     R1,R3,#+16
   \   00000026   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x4906             LDR.N    R1,??LPLD_Set_SYS_DIV_0+0x4  ;; 0x40048044
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    241          
    242            // 延时一小段时间等待改变
    243            for (i = 0 ; i < outdiv4 ; i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??LPLD_Set_SYS_DIV_1
   \                     ??LPLD_Set_SYS_DIV_2:
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_Set_SYS_DIV_1:
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4298             CMP      R0,R3
   \   0000003A   0xD3FB             BCC.N    ??LPLD_Set_SYS_DIV_2
    244            {}
    245            
    246            FMC->PFAPR = temp_reg; // 回复原先的 FMC_PFAPR 寄存器值
   \   0000003C   0x4801             LDR.N    R0,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   0000003E   0x6004             STR      R4,[R0, #+0]
    247            
    248            return;
   \   00000040   0xBC70             POP      {R4-R6}
   \   00000042   0x4770             BX       LR               ;; return
   \                     ??LPLD_Set_SYS_DIV_0:
   \   00000044   0x4001F000         DC32     0x4001f000
   \   00000048   0x40048044         DC32     0x40048044
    249          } // set_sys_dividers

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  LPLD_PLL_Setup
             24 -> LPLD_PLL_Setup
             24 -> LPLD_Set_SYS_DIV
       12  LPLD_Set_SYS_DIV


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     492  LPLD_PLL_Setup
      76  LPLD_Set_SYS_DIV
       4  g_bus_clock
       4  g_core_clock
       4  g_flash_clock
       4  g_flexbus_clock

 
  16 bytes in section .data
 492 bytes in section .text
  76 bytes in section .textrw
 
 568 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
