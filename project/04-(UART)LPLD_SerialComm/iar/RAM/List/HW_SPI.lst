###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     16/Feb/2014  16:24:52 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c     #
#    Command line =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c -D  #
#                    LPLD_K60 -lCN "C:\embed\LPLD\LPLD_OSKinetis_V3\project\0 #
#                    4-(UART)LPLD_SerialComm\iar\RAM\List\" -lB               #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\RAM\List\" -o                              #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\RAM\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(U #
#                    ART)LPLD_SerialComm\iar\..\app\" -I                      #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\CPU\" -I                      #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\common\" -I                   #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\" -I                     #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\HW\" -I                  #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\DEV\" -I                 #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\uCOS-II\Ports\" -I            #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\uCOS-II\Source\" -I           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\FatFs\" -I                    #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\FatFs\option\" -I             #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\common\" -I               #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\driver\" -I               #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\descriptor\" -I           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\class\" -Ol -I            #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\" -D ARM_MATH_CM4                  #
#    List file    =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_Se #
#                    rialComm\iar\RAM\List\HW_SPI.lst                         #
#    Object file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_Se #
#                    rialComm\iar\RAM\Obj\HW_SPI.o                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_SPI.c
      1          /**
      2           * @file HW_SPI.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief SPI底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable8_1  ;; 0xe000e180
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return
     23          #include "HW_SPI.h"
     24          

   \                                 In section .bss, align 4
     25          SPI_ISR_CALLBACK SPI0_ISR[6];
   \                     SPI0_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     26          SPI_ISR_CALLBACK SPI1_ISR[6];
   \                     SPI1_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     27          SPI_ISR_CALLBACK SPI2_ISR[6];
   \                     SPI2_ISR:
   \   00000000                      DS8 24
     28          
     29          /*
     30           * LPLD_SPI_Init
     31           * SPI初始化函数,在该函数中选择SPI通道，初始化SPI SCK总线时钟
     32           * 选择使能Tx，Rx FIFO，选择开启SPI外设的发送完成，发送队列结束，
     33           * Tx FIFO队列为空，Rx FIFO队列溢出，选择FIFO的中断方式和DMA请求等
     34           * 
     35           * 参数:
     36           *    spi_init_structure--SPI初始化结构体，
     37           *                        具体定义见SPI_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_SPI_Init(SPI_InitTypeDef spi_init_structure)
     44          {
   \                     LPLD_SPI_Init:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB089             SUB      SP,SP,#+36
     45            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000008   0x9812             LDR      R0,[SP, #+72]
     46            uint8 spi_mode = spi_init_structure.SPI_ModeSelect;
   \   0000000A   0xF89D 0x104C      LDRB     R1,[SP, #+76]
   \   0000000E   0xF88D 0x1009      STRB     R1,[SP, #+9]
     47            uint8 sck_div = spi_init_structure.SPI_SckDivider; 
   \   00000012   0xF89D 0x104D      LDRB     R1,[SP, #+77]
   \   00000016   0xF88D 0x1008      STRB     R1,[SP, #+8]
     48            boolean txFIFO_enable = spi_init_structure.SPI_EnableTxFIFO;
   \   0000001A   0xF89D 0x104E      LDRB     R1,[SP, #+78]
   \   0000001E   0xF88D 0x1007      STRB     R1,[SP, #+7]
     49            boolean rxFIFO_enable = spi_init_structure.SPI_EnableRxFIFO;
   \   00000022   0xF89D 0x104F      LDRB     R1,[SP, #+79]
   \   00000026   0xF88D 0x1006      STRB     R1,[SP, #+6]
     50            //定义SPI外设中断变量
     51            boolean tx_complete_int = spi_init_structure.SPI_TxCompleteIntEnable;
   \   0000002A   0xF89D 0x1050      LDRB     R1,[SP, #+80]
     52            boolean QueueEnd_Request_int = spi_init_structure.SPI_QueueEndIntEnable; 
   \   0000002E   0xF89D 0x2051      LDRB     R2,[SP, #+81]
     53            boolean txFIFO_underflow_int = spi_init_structure.SPI_TxFIFO_UnderflowIntEnable;
   \   00000032   0xF89D 0x3052      LDRB     R3,[SP, #+82]
     54            boolean rxFIFO_overflow_int = spi_init_structure.SPI_RxFIFO_OverflowIntEnable;
   \   00000036   0xF89D 0x4053      LDRB     R4,[SP, #+83]
     55            boolean txFIFO_Fill_int = spi_init_structure.SPI_TxFIFO_FillIntEnable;
   \   0000003A   0xF89D 0x5054      LDRB     R5,[SP, #+84]
     56            boolean rxFIFO_Drain_int = spi_init_structure.SPI_RxFIFO_DrainIntEnable; 
   \   0000003E   0xF89D 0x6055      LDRB     R6,[SP, #+85]
     57            boolean txFIFO_req = spi_init_structure.SPI_TxFIFO_RequestSelect;
   \   00000042   0xF89D 0x7056      LDRB     R7,[SP, #+86]
     58            boolean rxFIFO_req = spi_init_structure.SPI_RxFIFO_RequestSelect;
   \   00000046   0xF89D 0xE057      LDRB     LR,[SP, #+87]
     59            //选择SPI引脚
     60            PortPinsEnum_Type miso_pin = spi_init_structure.SPI_MisoPin;//MISO 
   \   0000004A   0xF89D 0x8060      LDRB     R8,[SP, #+96]
   \   0000004E   0xF88D 0x8001      STRB     R8,[SP, #+1]
     61            PortPinsEnum_Type mosi_pin = spi_init_structure.SPI_MosiPin;//MOSI
   \   00000052   0xF89D 0x805F      LDRB     R8,[SP, #+95]
   \   00000056   0xF88D 0x8000      STRB     R8,[SP, #+0]
     62            PortPinsEnum_Type sck_pin = spi_init_structure.SPI_SckPin;  //SCK
   \   0000005A   0xF89D 0x805E      LDRB     R8,[SP, #+94]
     63            PortPinsEnum_Type pcs0_pin = spi_init_structure.SPI_Pcs0Pin;//PCS0
   \   0000005E   0xF89D 0x9058      LDRB     R9,[SP, #+88]
     64            PortPinsEnum_Type pcs1_pin = spi_init_structure.SPI_Pcs1Pin;//PCS1
   \   00000062   0xF89D 0xA059      LDRB     R10,[SP, #+89]
     65            PortPinsEnum_Type pcs2_pin = spi_init_structure.SPI_Pcs2Pin;//PCS2
   \   00000066   0xF89D 0xB05A      LDRB     R11,[SP, #+90]
   \   0000006A   0xF88D 0xB003      STRB     R11,[SP, #+3]
     66            PortPinsEnum_Type pcs3_pin = spi_init_structure.SPI_Pcs3Pin;//PCS3
   \   0000006E   0xF89D 0xB05B      LDRB     R11,[SP, #+91]
   \   00000072   0xF88D 0xB002      STRB     R11,[SP, #+2]
     67            PortPinsEnum_Type pcs4_pin = spi_init_structure.SPI_Pcs4Pin;//PCS4
   \   00000076   0xF89D 0xB05C      LDRB     R11,[SP, #+92]
   \   0000007A   0xF88D 0xB005      STRB     R11,[SP, #+5]
     68            PortPinsEnum_Type pcs5_pin = spi_init_structure.SPI_Pcs5Pin;//PCS5
   \   0000007E   0xF89D 0xB05D      LDRB     R11,[SP, #+93]
   \   00000082   0xF88D 0xB004      STRB     R11,[SP, #+4]
     69            //定义中断回掉函数
     70            SPI_ISR_CALLBACK TxComplete_isr = spi_init_structure.SPI_TxCompleteIntIsr;
   \   00000086   0xF8DD 0xB064      LDR      R11,[SP, #+100]
   \   0000008A   0xF8CD 0xB020      STR      R11,[SP, #+32]
     71            SPI_ISR_CALLBACK QueueEndReq_isr = spi_init_structure.SPI_QueueEndIntIsr;
   \   0000008E   0xF8DD 0xB068      LDR      R11,[SP, #+104]
   \   00000092   0xF8CD 0xB01C      STR      R11,[SP, #+28]
     72            SPI_ISR_CALLBACK UnderflowInt_isr = spi_init_structure.SPI_TxFIFO_UnderflowIntIsr;
   \   00000096   0xF8DD 0xB06C      LDR      R11,[SP, #+108]
   \   0000009A   0xF8CD 0xB018      STR      R11,[SP, #+24]
     73            SPI_ISR_CALLBACK OverflowInt_isr = spi_init_structure.SPI_RxFIFO_OverflowIntIsr;
   \   0000009E   0xF8DD 0xB070      LDR      R11,[SP, #+112]
   \   000000A2   0xF8CD 0xB014      STR      R11,[SP, #+20]
     74            SPI_ISR_CALLBACK FillInt_isr = spi_init_structure.SPI_TxFIFO_FillIntIsr;
   \   000000A6   0xF8DD 0xB074      LDR      R11,[SP, #+116]
   \   000000AA   0xF8CD 0xB010      STR      R11,[SP, #+16]
     75            SPI_ISR_CALLBACK DrainInt_isr = spi_init_structure.SPI_RxFIFO_DrainIntIsr;
   \   000000AE   0xF8DD 0xB078      LDR      R11,[SP, #+120]
   \   000000B2   0xF8CD 0xB00C      STR      R11,[SP, #+12]
     76            //检测参数
     77            ASSERT(spi_mode <= SPI_MODE_MASTER);
     78            ASSERT(sck_div <= SPI_SCK_DIV_32768);
     79          
     80            if(spix == SPI0)
   \   000000B6   0x.... 0x....      LDR.W    R12,??DataTable8_2  ;; 0x4002c000
   \   000000BA   0x4560             CMP      R0,R12
   \   000000BC   0xF040 0x80B3      BNE.W    ??LPLD_SPI_Init_0
     81            {
     82              SIM->SCGC6 |= SIM_SCGC6_DSPI0_MASK;  
   \   000000C0   0x.... 0x....      LDR.W    R12,??DataTable8_3  ;; 0x4004803c
   \   000000C4   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   000000C8   0xF45C 0x5C80      ORRS     R12,R12,#0x1000
   \   000000CC   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   000000D0   0xF8CB 0xC000      STR      R12,[R11, #+0]
     83          
     84              //选择PCS0
     85              if(pcs0_pin == PTA14)
   \   000000D4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000D8   0xF1B9 0x0F0E      CMP      R9,#+14
   \   000000DC   0xD106             BNE.N    ??LPLD_SPI_Init_1
     86              {
     87                PORTA->PCR[14] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000000DE   0x.... 0x....      LDR.W    R12,??DataTable8_4  ;; 0x40049038
   \   000000E2   0xF44F 0x7910      MOV      R9,#+576
   \   000000E6   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   000000EA   0xE005             B.N      ??LPLD_SPI_Init_2
     88              }
     89              else//pcs0_pin == PTC4
     90              {
     91                PORTC->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_1:
   \   000000EC   0x.... 0x....      LDR.W    R12,??DataTable8_5  ;; 0x4004b010
   \   000000F0   0xF44F 0x7910      MOV      R9,#+576
   \   000000F4   0xF8CC 0x9000      STR      R9,[R12, #+0]
     92              }
     93              //选择PCS1
     94              if(pcs1_pin == PTC3)
   \                     ??LPLD_SPI_Init_2:
   \   000000F8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000FC   0xF1BA 0x0F3F      CMP      R10,#+63
   \   00000100   0xD106             BNE.N    ??LPLD_SPI_Init_3
     95              {
     96                PORTC->PCR[3]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000102   0x.... 0x....      LDR.W    R12,??DataTable8_6  ;; 0x4004b00c
   \   00000106   0xF44F 0x7910      MOV      R9,#+576
   \   0000010A   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   0000010E   0xE005             B.N      ??LPLD_SPI_Init_4
     97              }
     98              else //pcs1_pin == PTD4
     99              {
    100                PORTD->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_3:
   \   00000110   0x.... 0x....      LDR.W    R12,??DataTable8_7  ;; 0x4004c010
   \   00000114   0xF44F 0x7910      MOV      R9,#+576
   \   00000118   0xF8CC 0x9000      STR      R9,[R12, #+0]
    101              }
    102              //选择PCS2
    103              if(pcs2_pin == PTC2)
   \                     ??LPLD_SPI_Init_4:
   \   0000011C   0xF89D 0xC003      LDRB     R12,[SP, #+3]
   \   00000120   0xF1BC 0x0F3E      CMP      R12,#+62
   \   00000124   0xD106             BNE.N    ??LPLD_SPI_Init_5
    104              {
    105                PORTC->PCR[2]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000126   0x.... 0x....      LDR.W    R12,??DataTable8_8  ;; 0x4004b008
   \   0000012A   0xF44F 0x7910      MOV      R9,#+576
   \   0000012E   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   00000132   0xE005             B.N      ??LPLD_SPI_Init_6
    106              }
    107              else //pcs2_pin == PTD5
    108              {
    109                PORTD->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_5:
   \   00000134   0x.... 0x....      LDR.W    R12,??DataTable8_9  ;; 0x4004c014
   \   00000138   0xF44F 0x7910      MOV      R9,#+576
   \   0000013C   0xF8CC 0x9000      STR      R9,[R12, #+0]
    110              }
    111              //选择PCS3
    112              if(pcs3_pin == PTC1)
   \                     ??LPLD_SPI_Init_6:
   \   00000140   0xF89D 0xC002      LDRB     R12,[SP, #+2]
   \   00000144   0xF1BC 0x0F3D      CMP      R12,#+61
   \   00000148   0xD106             BNE.N    ??LPLD_SPI_Init_7
    113              {
    114                PORTC->PCR[1]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000014A   0x.... 0x....      LDR.W    R12,??DataTable8_10  ;; 0x4004b004
   \   0000014E   0xF44F 0x7910      MOV      R9,#+576
   \   00000152   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   00000156   0xE005             B.N      ??LPLD_SPI_Init_8
    115              }
    116              else //pcs3_pin == PTD6
    117              {
    118                PORTD->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_7:
   \   00000158   0x.... 0x....      LDR.W    R12,??DataTable8_11  ;; 0x4004c018
   \   0000015C   0xF44F 0x7910      MOV      R9,#+576
   \   00000160   0xF8CC 0x9000      STR      R9,[R12, #+0]
    119              }
    120              //选择PCS4
    121              if(pcs4_pin == PTC0)
   \                     ??LPLD_SPI_Init_8:
   \   00000164   0xF89D 0xC005      LDRB     R12,[SP, #+5]
   \   00000168   0xF1BC 0x0F3C      CMP      R12,#+60
   \   0000016C   0xD11C             BNE.N    ??LPLD_SPI_Init_9
    122              {
    123                PORTC->PCR[0]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000016E   0x.... 0x....      LDR.W    R12,??DataTable8_12  ;; 0x4004b000
   \   00000172   0xF44F 0x7910      MOV      R9,#+576
   \   00000176   0xF8CC 0x9000      STR      R9,[R12, #+0]
    124              }
    125              else
    126                return 0;
    127              //选择PCS5
    128              if(pcs5_pin == PTB23)
   \   0000017A   0xF89D 0xC004      LDRB     R12,[SP, #+4]
   \   0000017E   0xF1BC 0x0F37      CMP      R12,#+55
   \   00000182   0xD105             BNE.N    ??LPLD_SPI_Init_10
    129              {
    130                PORTB->PCR[23] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
   \   00000184   0x.... 0x....      LDR.W    R12,??DataTable8_13  ;; 0x4004a05c
   \   00000188   0xF44F 0x7950      MOV      R9,#+832
   \   0000018C   0xF8CC 0x9000      STR      R9,[R12, #+0]
    131              }
    132          
    133              //选择SCK
    134              if(sck_pin == PTA15)
   \                     ??LPLD_SPI_Init_10:
   \   00000190   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000194   0xF1B8 0x0F0F      CMP      R8,#+15
   \   00000198   0xD108             BNE.N    ??LPLD_SPI_Init_11
    135              {
    136                PORTA->PCR[15] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \   0000019A   0x.... 0x....      LDR.W    R12,??DataTable8_14  ;; 0x4004903c
   \   0000019E   0xF44F 0x7810      MOV      R8,#+576
   \   000001A2   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000001A6   0xE007             B.N      ??LPLD_SPI_Init_12
    137              }
   \                     ??LPLD_SPI_Init_9:
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0xE2A1             B.N      ??LPLD_SPI_Init_13
    138              else //sck_pin == PTC5
    139              {
    140                PORTC->PCR[5] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_11:
   \   000001AC   0x.... 0x....      LDR.W    R12,??DataTable8_15  ;; 0x4004b014
   \   000001B0   0xF44F 0x7810      MOV      R8,#+576
   \   000001B4   0xF8CC 0x8000      STR      R8,[R12, #+0]
    141              }
    142              //选择MOSI
    143              if(mosi_pin == PTA16)
   \                     ??LPLD_SPI_Init_12:
   \   000001B8   0xF89D 0xC000      LDRB     R12,[SP, #+0]
   \   000001BC   0xF1BC 0x0F10      CMP      R12,#+16
   \   000001C0   0xD106             BNE.N    ??LPLD_SPI_Init_14
    144              {
    145                PORTA->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   000001C2   0x.... 0x....      LDR.W    R12,??DataTable8_16  ;; 0x40049040
   \   000001C6   0xF44F 0x7810      MOV      R8,#+576
   \   000001CA   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000001CE   0xE005             B.N      ??LPLD_SPI_Init_15
    146              }
    147              else //mosi_pin == PTC6
    148              {
    149                PORTC->PCR[6] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_14:
   \   000001D0   0x.... 0x....      LDR.W    R12,??DataTable8_17  ;; 0x4004b018
   \   000001D4   0xF44F 0x7810      MOV      R8,#+576
   \   000001D8   0xF8CC 0x8000      STR      R8,[R12, #+0]
    150              }
    151              //选择MISO
    152              if(miso_pin == PTA17)
   \                     ??LPLD_SPI_Init_15:
   \   000001DC   0xF89D 0xC001      LDRB     R12,[SP, #+1]
   \   000001E0   0xF1BC 0x0F11      CMP      R12,#+17
   \   000001E4   0xD118             BNE.N    ??LPLD_SPI_Init_16
    153              {
    154                PORTA->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000001E6   0x.... 0x....      LDR.W    R12,??DataTable8_18  ;; 0x40049044
   \   000001EA   0xF44F 0x7800      MOV      R8,#+512
   \   000001EE   0xF8CC 0x8000      STR      R8,[R12, #+0]
    155              }
    156              else //miso_pin == PTC7
    157              {
    158                PORTC->PCR[7] = 0 | PORT_PCR_MUX(2); //SIN
    159              } 
    160            
    161            }
    162            else if(spix == SPI1)
    163            {
    164              SIM->SCGC6 |= SIM_SCGC6_SPI1_MASK;
    165              //选择PCS0
    166              if(pcs0_pin == PTB10)
    167              {
    168                PORTB->PCR[10] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    169              }
    170              else//pcs0_pin == PTE4
    171              {
    172                PORTE->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    173              }
    174              //选择PCS1
    175              if(pcs1_pin == PTB9)
    176              {
    177                PORTB->PCR[9]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    178              }
    179              else //pcs1_pin == PTE0
    180              {
    181                PORTE->PCR[0] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    182              }
    183              //选择PCS2
    184              if(pcs2_pin == PTE5)
    185              {
    186                PORTE->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    187              }
    188          
    189              //选择PCS3
    190              if(pcs3_pin == PTE6)
    191              {
    192                PORTE->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    193              }
    194          
    195              //选择SCK
    196              if(sck_pin == PTB11)
    197              {
    198                PORTB->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    199              }
    200              else //sck_pin == PTE2
    201              {
    202                PORTE->PCR[2] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
    203              }
    204              //选择MOSI
    205              if(mosi_pin == PTB16)
    206              {
    207                PORTB->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    208              }
    209              else //mosi_pin == PTE1
    210              {
    211                PORTE->PCR[1] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    212              }
    213              //选择MISO
    214              if(miso_pin == PTB17)
    215              {
    216                PORTB->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
    217              }
    218              else //miso_pin == PTE3
    219              {
    220                PORTE->PCR[3] = 0 | PORT_PCR_MUX(2); //SIN
    221              } 
    222            }
    223            else if(spix == SPI2)
    224            {
    225              SIM->SCGC3 |= SIM_SCGC3_SPI2_MASK;
    226              //选择PCS0
    227              if(pcs0_pin == PTD11)
    228              {
    229                PORTD->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    230              }
    231              else//pcs0_pin == PTB20
    232              {
    233                PORTB->PCR[20] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    234              }
    235              //选择PCS1
    236              if(pcs1_pin == PTD15)
    237              {
    238                PORTD->PCR[15]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    239              }
    240          
    241              //选择SCK
    242              if(sck_pin == PTD12)
    243              {
    244                PORTD->PCR[12] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    245              }
    246              else //sck_pin == PTB21
    247              {
    248                PORTB->PCR[21] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
    249              }
    250              //选择MOSI
    251              if(mosi_pin == PTD13)
    252              {
    253                PORTD->PCR[13] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    254              }
    255              else //mosi_pin == PTB22
    256              {
    257                PORTB->PCR[22] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    258              }
    259              //选择MISO
    260              if(miso_pin == PTD14)
    261              {
    262                PORTD->PCR[14] = 0 | PORT_PCR_MUX(2); //SIN
    263              }
    264              else //miso_pin == PTB23
    265              {
    266                PORTB->PCR[23] = 0 | PORT_PCR_MUX(2); //SIN
    267              } 
    268            }
    269            else
    270              return 0;
    271            //配置SPI MCR寄存器
    272            spix->MCR = 0 & (~SPI_MCR_MDIS_MASK)        
    273                          |SPI_MCR_HALT_MASK        
    274                          |SPI_MCR_PCSIS_MASK       
    275                          |SPI_MCR_CLR_TXF_MASK    
    276                          |SPI_MCR_CLR_RXF_MASK;  
   \                     ??LPLD_SPI_Init_17:
   \   000001F2   0x.... 0x....      LDR.W    R12,??DataTable8_19  ;; 0x3f0c01
   \   000001F6   0xF8C0 0xC000      STR      R12,[R0, #+0]
    277            //选择SPI 工作模式
    278            if(spi_mode == SPI_MODE_SLAVE)
   \   000001FA   0xF89D 0xC009      LDRB     R12,[SP, #+9]
   \   000001FE   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000202   0xF040 0x80F3      BNE.W    ??LPLD_SPI_Init_18
    279            {
    280              spix->MCR &= ~SPI_MCR_MSTR_MASK;//从机模式  
   \   00000206   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   0000020A   0xEA5F 0x0C4C      LSLS     R12,R12,#+1      ;; ZeroExtS R12,R12,#+1,#+1
   \   0000020E   0xEA5F 0x0C5C      LSRS     R12,R12,#+1
   \   00000212   0xF8C0 0xC000      STR      R12,[R0, #+0]
   \   00000216   0xE0EF             B.N      ??LPLD_SPI_Init_19
    281            }
   \                     ??LPLD_SPI_Init_16:
   \   00000218   0x.... 0x....      LDR.W    R12,??DataTable8_20  ;; 0x4004b01c
   \   0000021C   0xF44F 0x7800      MOV      R8,#+512
   \   00000220   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   00000224   0xE7E5             B.N      ??LPLD_SPI_Init_17
   \                     ??LPLD_SPI_Init_0:
   \   00000226   0x.... 0x....      LDR.W    R12,??DataTable8_21  ;; 0x4002d000
   \   0000022A   0x4560             CMP      R0,R12
   \   0000022C   0xD17A             BNE.N    ??LPLD_SPI_Init_20
   \   0000022E   0x.... 0x....      LDR.W    R12,??DataTable8_3  ;; 0x4004803c
   \   00000232   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000236   0xF45C 0x5C00      ORRS     R12,R12,#0x2000
   \   0000023A   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   0000023E   0xF8CB 0xC000      STR      R12,[R11, #+0]
   \   00000242   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000246   0xF1B9 0x0F2A      CMP      R9,#+42
   \   0000024A   0xD106             BNE.N    ??LPLD_SPI_Init_21
   \   0000024C   0x.... 0x....      LDR.W    R12,??DataTable8_22  ;; 0x4004a028
   \   00000250   0xF44F 0x7910      MOV      R9,#+576
   \   00000254   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   00000258   0xE005             B.N      ??LPLD_SPI_Init_22
   \                     ??LPLD_SPI_Init_21:
   \   0000025A   0x.... 0x....      LDR.W    R12,??DataTable8_23  ;; 0x4004d010
   \   0000025E   0xF44F 0x7910      MOV      R9,#+576
   \   00000262   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_22:
   \   00000266   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000026A   0xF1BA 0x0F29      CMP      R10,#+41
   \   0000026E   0xD106             BNE.N    ??LPLD_SPI_Init_23
   \   00000270   0x.... 0x....      LDR.W    R12,??DataTable8_24  ;; 0x4004a024
   \   00000274   0xF44F 0x7910      MOV      R9,#+576
   \   00000278   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   0000027C   0xE005             B.N      ??LPLD_SPI_Init_24
   \                     ??LPLD_SPI_Init_23:
   \   0000027E   0x.... 0x....      LDR.W    R12,??DataTable8_25  ;; 0x4004d000
   \   00000282   0xF44F 0x7910      MOV      R9,#+576
   \   00000286   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_24:
   \   0000028A   0xF89D 0xC003      LDRB     R12,[SP, #+3]
   \   0000028E   0xF1BC 0x0F81      CMP      R12,#+129
   \   00000292   0xD105             BNE.N    ??LPLD_SPI_Init_25
   \   00000294   0x.... 0x....      LDR.W    R12,??DataTable8_26  ;; 0x4004d014
   \   00000298   0xF44F 0x7910      MOV      R9,#+576
   \   0000029C   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_25:
   \   000002A0   0xF89D 0xC002      LDRB     R12,[SP, #+2]
   \   000002A4   0xF1BC 0x0F82      CMP      R12,#+130
   \   000002A8   0xD105             BNE.N    ??LPLD_SPI_Init_26
   \   000002AA   0x.... 0x....      LDR.W    R12,??DataTable8_27  ;; 0x4004d018
   \   000002AE   0xF44F 0x7910      MOV      R9,#+576
   \   000002B2   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_26:
   \   000002B6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000002BA   0xF1B8 0x0F2B      CMP      R8,#+43
   \   000002BE   0xD106             BNE.N    ??LPLD_SPI_Init_27
   \   000002C0   0x.... 0x....      LDR.W    R12,??DataTable8_28  ;; 0x4004a02c
   \   000002C4   0xF44F 0x7810      MOV      R8,#+576
   \   000002C8   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000002CC   0xE005             B.N      ??LPLD_SPI_Init_28
   \                     ??LPLD_SPI_Init_27:
   \   000002CE   0x.... 0x....      LDR.W    R12,??DataTable8_29  ;; 0x4004d008
   \   000002D2   0xF44F 0x7810      MOV      R8,#+576
   \   000002D6   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \                     ??LPLD_SPI_Init_28:
   \   000002DA   0xF89D 0xC000      LDRB     R12,[SP, #+0]
   \   000002DE   0xF1BC 0x0F30      CMP      R12,#+48
   \   000002E2   0xD106             BNE.N    ??LPLD_SPI_Init_29
   \   000002E4   0x.... 0x....      LDR.W    R12,??DataTable8_30  ;; 0x4004a040
   \   000002E8   0xF44F 0x7810      MOV      R8,#+576
   \   000002EC   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000002F0   0xE005             B.N      ??LPLD_SPI_Init_30
   \                     ??LPLD_SPI_Init_29:
   \   000002F2   0x.... 0x....      LDR.W    R12,??DataTable8_31  ;; 0x4004d004
   \   000002F6   0xF44F 0x7810      MOV      R8,#+576
   \   000002FA   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \                     ??LPLD_SPI_Init_30:
   \   000002FE   0xF89D 0xC001      LDRB     R12,[SP, #+1]
   \   00000302   0xF1BC 0x0F31      CMP      R12,#+49
   \   00000306   0xD106             BNE.N    ??LPLD_SPI_Init_31
   \   00000308   0x.... 0x....      LDR.W    R12,??DataTable8_32  ;; 0x4004a044
   \   0000030C   0xF44F 0x7800      MOV      R8,#+512
   \   00000310   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   00000314   0xE76D             B.N      ??LPLD_SPI_Init_17
   \                     ??LPLD_SPI_Init_31:
   \   00000316   0x.... 0x....      LDR.W    R12,??DataTable8_33  ;; 0x4004d00c
   \   0000031A   0xF44F 0x7800      MOV      R8,#+512
   \   0000031E   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   00000322   0xE766             B.N      ??LPLD_SPI_Init_17
   \                     ??LPLD_SPI_Init_20:
   \   00000324   0x.... 0x....      LDR.W    R12,??DataTable8_34  ;; 0x400ac000
   \   00000328   0x4560             CMP      R0,R12
   \   0000032A   0xD15D             BNE.N    ??LPLD_SPI_Init_32
   \   0000032C   0x.... 0x....      LDR.W    R12,??DataTable8_35  ;; 0x40048030
   \   00000330   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000334   0xF45C 0x5C80      ORRS     R12,R12,#0x1000
   \   00000338   0x.... 0x....      LDR.W    R11,??DataTable8_35  ;; 0x40048030
   \   0000033C   0xF8CB 0xC000      STR      R12,[R11, #+0]
   \   00000340   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000344   0xF1B9 0x0F67      CMP      R9,#+103
   \   00000348   0xD106             BNE.N    ??LPLD_SPI_Init_33
   \   0000034A   0x.... 0x....      LDR.W    R12,??DataTable8_36  ;; 0x4004c02c
   \   0000034E   0xF44F 0x7910      MOV      R9,#+576
   \   00000352   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \   00000356   0xE005             B.N      ??LPLD_SPI_Init_34
   \                     ??LPLD_SPI_Init_33:
   \   00000358   0x.... 0x....      LDR.W    R12,??DataTable8_37  ;; 0x4004a050
   \   0000035C   0xF44F 0x7910      MOV      R9,#+576
   \   00000360   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_34:
   \   00000364   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000368   0xF1BA 0x0F6B      CMP      R10,#+107
   \   0000036C   0xD105             BNE.N    ??LPLD_SPI_Init_35
   \   0000036E   0x.... 0x....      LDR.W    R12,??DataTable8_38  ;; 0x4004c03c
   \   00000372   0xF44F 0x7910      MOV      R9,#+576
   \   00000376   0xF8CC 0x9000      STR      R9,[R12, #+0]
   \                     ??LPLD_SPI_Init_35:
   \   0000037A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000037E   0xF1B8 0x0F68      CMP      R8,#+104
   \   00000382   0xD106             BNE.N    ??LPLD_SPI_Init_36
   \   00000384   0x.... 0x....      LDR.W    R12,??DataTable8_39  ;; 0x4004c030
   \   00000388   0xF44F 0x7810      MOV      R8,#+576
   \   0000038C   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   00000390   0xE005             B.N      ??LPLD_SPI_Init_37
   \                     ??LPLD_SPI_Init_36:
   \   00000392   0x.... 0x....      LDR.W    R12,??DataTable8_40  ;; 0x4004a054
   \   00000396   0xF44F 0x7810      MOV      R8,#+576
   \   0000039A   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \                     ??LPLD_SPI_Init_37:
   \   0000039E   0xF89D 0xC000      LDRB     R12,[SP, #+0]
   \   000003A2   0xF1BC 0x0F69      CMP      R12,#+105
   \   000003A6   0xD106             BNE.N    ??LPLD_SPI_Init_38
   \   000003A8   0x.... 0x....      LDR.W    R12,??DataTable8_41  ;; 0x4004c034
   \   000003AC   0xF44F 0x7810      MOV      R8,#+576
   \   000003B0   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000003B4   0xE005             B.N      ??LPLD_SPI_Init_39
   \                     ??LPLD_SPI_Init_38:
   \   000003B6   0x.... 0x....      LDR.W    R12,??DataTable8_42  ;; 0x4004a058
   \   000003BA   0xF44F 0x7810      MOV      R8,#+576
   \   000003BE   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \                     ??LPLD_SPI_Init_39:
   \   000003C2   0xF89D 0xC001      LDRB     R12,[SP, #+1]
   \   000003C6   0xF1BC 0x0F6A      CMP      R12,#+106
   \   000003CA   0xD106             BNE.N    ??LPLD_SPI_Init_40
   \   000003CC   0x.... 0x....      LDR.W    R12,??DataTable8_43  ;; 0x4004c038
   \   000003D0   0xF44F 0x7800      MOV      R8,#+512
   \   000003D4   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000003D8   0xE70B             B.N      ??LPLD_SPI_Init_17
   \                     ??LPLD_SPI_Init_40:
   \   000003DA   0x.... 0x....      LDR.W    R12,??DataTable8_13  ;; 0x4004a05c
   \   000003DE   0xF44F 0x7800      MOV      R8,#+512
   \   000003E2   0xF8CC 0x8000      STR      R8,[R12, #+0]
   \   000003E6   0xE704             B.N      ??LPLD_SPI_Init_17
   \                     ??LPLD_SPI_Init_32:
   \   000003E8   0x2000             MOVS     R0,#+0
   \   000003EA   0xE181             B.N      ??LPLD_SPI_Init_13
    282            else
    283            {
    284              spix->MCR |= SPI_MCR_MSTR_MASK; //主机模式 
   \                     ??LPLD_SPI_Init_18:
   \   000003EC   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   000003F0   0xF05C 0x4C00      ORRS     R12,R12,#0x80000000
   \   000003F4   0xF8C0 0xC000      STR      R12,[R0, #+0]
    285            }
    286            //选择使能tx FIFO
    287            if(txFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_19:
   \   000003F8   0xF89D 0xC007      LDRB     R12,[SP, #+7]
   \   000003FC   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000400   0xD106             BNE.N    ??LPLD_SPI_Init_41
    288            {
    289              spix->MCR &= ~SPI_MCR_DIS_TXF_MASK; 
   \   00000402   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   00000406   0xF43C 0x5C00      BICS     R12,R12,#0x2000
   \   0000040A   0xF8C0 0xC000      STR      R12,[R0, #+0]
   \   0000040E   0xE005             B.N      ??LPLD_SPI_Init_42
    290            }
    291            else
    292            {
    293              spix->MCR |= SPI_MCR_DIS_TXF_MASK;//选择传统方式
   \                     ??LPLD_SPI_Init_41:
   \   00000410   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   00000414   0xF45C 0x5C00      ORRS     R12,R12,#0x2000
   \   00000418   0xF8C0 0xC000      STR      R12,[R0, #+0]
    294            }
    295            //选择使能Rx FIFO
    296            if(rxFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_42:
   \   0000041C   0xF89D 0xC006      LDRB     R12,[SP, #+6]
   \   00000420   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000424   0xD106             BNE.N    ??LPLD_SPI_Init_43
    297            {
    298              spix->MCR &= ~SPI_MCR_DIS_RXF_MASK;
   \   00000426   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   0000042A   0xF43C 0x5C80      BICS     R12,R12,#0x1000
   \   0000042E   0xF8C0 0xC000      STR      R12,[R0, #+0]
   \   00000432   0xE005             B.N      ??LPLD_SPI_Init_44
    299            }
    300            else
    301            {
    302              spix->MCR |= SPI_MCR_DIS_RXF_MASK; //选择传统方式
   \                     ??LPLD_SPI_Init_43:
   \   00000434   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   00000438   0xF45C 0x5C80      ORRS     R12,R12,#0x1000
   \   0000043C   0xF8C0 0xC000      STR      R12,[R0, #+0]
    303            }
    304            //选择使能发送完成中断
    305            if(tx_complete_int == TRUE)
   \                     ??LPLD_SPI_Init_44:
   \   00000440   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000442   0x2901             CMP      R1,#+1
   \   00000444   0xD106             BNE.N    ??LPLD_SPI_Init_45
    306            {
    307              spix->RSER |= SPI_RSER_TCF_RE_MASK; 
   \   00000446   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000044A   0xF05C 0x4C00      ORRS     R12,R12,#0x80000000
   \   0000044E   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   00000452   0xE007             B.N      ??LPLD_SPI_Init_46
    308            }
    309            else
    310            { 
    311              spix->RSER &= ~SPI_RSER_TCF_RE_MASK;
   \                     ??LPLD_SPI_Init_45:
   \   00000454   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   00000458   0xEA5F 0x0C4C      LSLS     R12,R12,#+1      ;; ZeroExtS R12,R12,#+1,#+1
   \   0000045C   0xEA5F 0x0C5C      LSRS     R12,R12,#+1
   \   00000460   0xF8C0 0xC030      STR      R12,[R0, #+48]
    312            }
    313            //选择使能发送队列结束中断
    314            if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_46:
   \   00000464   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000466   0x2A01             CMP      R2,#+1
   \   00000468   0xD106             BNE.N    ??LPLD_SPI_Init_47
    315            {
    316              spix->RSER |=SPI_RSER_EOQF_RE_MASK;
   \   0000046A   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000046E   0xF05C 0x5C80      ORRS     R12,R12,#0x10000000
   \   00000472   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   00000476   0xE005             B.N      ??LPLD_SPI_Init_48
    317            }
    318            else
    319              spix->RSER &= ~SPI_RSER_EOQF_RE_MASK;
   \                     ??LPLD_SPI_Init_47:
   \   00000478   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000047C   0xF03C 0x5C80      BICS     R12,R12,#0x10000000
   \   00000480   0xF8C0 0xC030      STR      R12,[R0, #+48]
    320            //选择使能txFIFO为空中断
    321            if(txFIFO_underflow_int== TRUE)
   \                     ??LPLD_SPI_Init_48:
   \   00000484   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000486   0x2B01             CMP      R3,#+1
   \   00000488   0xD106             BNE.N    ??LPLD_SPI_Init_49
    322            {
    323              spix->RSER |=SPI_RSER_TFUF_RE_MASK;
   \   0000048A   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000048E   0xF05C 0x6C00      ORRS     R12,R12,#0x8000000
   \   00000492   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   00000496   0xE005             B.N      ??LPLD_SPI_Init_50
    324            }
    325            else
    326              spix->RSER &= ~SPI_RSER_TFUF_RE_MASK;
   \                     ??LPLD_SPI_Init_49:
   \   00000498   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000049C   0xF03C 0x6C00      BICS     R12,R12,#0x8000000
   \   000004A0   0xF8C0 0xC030      STR      R12,[R0, #+48]
    327            //选择使能rxFIFO溢出中断
    328            if(rxFIFO_overflow_int== TRUE)
   \                     ??LPLD_SPI_Init_50:
   \   000004A4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004A6   0x2C01             CMP      R4,#+1
   \   000004A8   0xD106             BNE.N    ??LPLD_SPI_Init_51
    329            {
    330              spix->RSER |=SPI_RSER_RFOF_RE_MASK;
   \   000004AA   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004AE   0xF45C 0x2C00      ORRS     R12,R12,#0x80000
   \   000004B2   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   000004B6   0xE005             B.N      ??LPLD_SPI_Init_52
    331            }
    332            else
    333            {
    334              spix->RSER &= ~SPI_RSER_RFOF_RE_MASK;
   \                     ??LPLD_SPI_Init_51:
   \   000004B8   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004BC   0xF43C 0x2C00      BICS     R12,R12,#0x80000
   \   000004C0   0xF8C0 0xC030      STR      R12,[R0, #+48]
    335            }
    336            //选择使能txFIFO有数据进入队列中断或者DMA请求
    337            if(txFIFO_Fill_int== TRUE)
   \                     ??LPLD_SPI_Init_52:
   \   000004C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004C6   0x2D01             CMP      R5,#+1
   \   000004C8   0xD106             BNE.N    ??LPLD_SPI_Init_53
    338            {
    339              spix->RSER |=SPI_RSER_TFFF_RE_MASK;
   \   000004CA   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004CE   0xF05C 0x7C00      ORRS     R12,R12,#0x2000000
   \   000004D2   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   000004D6   0xE005             B.N      ??LPLD_SPI_Init_54
    340            }
    341            else
    342            {
    343              spix->RSER &= ~SPI_RSER_TFFF_RE_MASK;
   \                     ??LPLD_SPI_Init_53:
   \   000004D8   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004DC   0xF03C 0x7C00      BICS     R12,R12,#0x2000000
   \   000004E0   0xF8C0 0xC030      STR      R12,[R0, #+48]
    344            }
    345            //选择使能rxFIFO非空中断或者DMA请求
    346            if(rxFIFO_Drain_int== TRUE)
   \                     ??LPLD_SPI_Init_54:
   \   000004E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004E6   0x2E01             CMP      R6,#+1
   \   000004E8   0xD106             BNE.N    ??LPLD_SPI_Init_55
    347            {
    348              spix->RSER |=SPI_RSER_RFDF_RE_MASK;
   \   000004EA   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004EE   0xF45C 0x3C00      ORRS     R12,R12,#0x20000
   \   000004F2   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   000004F6   0xE005             B.N      ??LPLD_SPI_Init_56
    349            }
    350            else
    351            {
    352              spix->RSER &= ~SPI_RSER_RFDF_RE_MASK;
   \                     ??LPLD_SPI_Init_55:
   \   000004F8   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   000004FC   0xF43C 0x3C00      BICS     R12,R12,#0x20000
   \   00000500   0xF8C0 0xC030      STR      R12,[R0, #+48]
    353            }
    354            //选择使能txFIFO中断或者DMA请求
    355            if(txFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_56:
   \   00000504   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000506   0x2F01             CMP      R7,#+1
   \   00000508   0xD106             BNE.N    ??LPLD_SPI_Init_57
    356            {
    357              spix->RSER |=SPI_RSER_TFFF_DIRS_MASK;
   \   0000050A   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000050E   0xF05C 0x7C80      ORRS     R12,R12,#0x1000000
   \   00000512   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   00000516   0xE005             B.N      ??LPLD_SPI_Init_58
    358            }
    359            else
    360            {
    361              spix->RSER &= ~SPI_RSER_TFFF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_57:
   \   00000518   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   0000051C   0xF03C 0x7C80      BICS     R12,R12,#0x1000000
   \   00000520   0xF8C0 0xC030      STR      R12,[R0, #+48]
    362            }
    363            //选择使能rxFIFO中断或者DMA请求
    364            if(rxFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_58:
   \   00000524   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000528   0xF1BE 0x0F01      CMP      LR,#+1
   \   0000052C   0xD106             BNE.N    ??LPLD_SPI_Init_59
    365            {
    366              spix->RSER |= SPI_RSER_RFDF_DIRS_MASK;
   \   0000052E   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   00000532   0xF45C 0x3C80      ORRS     R12,R12,#0x10000
   \   00000536   0xF8C0 0xC030      STR      R12,[R0, #+48]
   \   0000053A   0xE005             B.N      ??LPLD_SPI_Init_60
    367            }
    368            else 
    369            {
    370              spix->RSER &= ~SPI_RSER_RFDF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_59:
   \   0000053C   0xF8D0 0xC030      LDR      R12,[R0, #+48]
   \   00000540   0xF43C 0x3C80      BICS     R12,R12,#0x10000
   \   00000544   0xF8C0 0xC030      STR      R12,[R0, #+48]
    371            }
    372            //添加中断回调函数
    373          
    374            if(spix == SPI0)
   \                     ??LPLD_SPI_Init_60:
   \   00000548   0x.... 0x....      LDR.W    R12,??DataTable8_2  ;; 0x4002c000
   \   0000054C   0x4560             CMP      R0,R12
   \   0000054E   0xD134             BNE.N    ??LPLD_SPI_Init_61
    375            {
    376              if(tx_complete_int == TRUE)
   \   00000550   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000552   0x2901             CMP      R1,#+1
   \   00000554   0xD105             BNE.N    ??LPLD_SPI_Init_62
    377              { SPI0_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000556   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   0000055A   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \   0000055E   0xF8C1 0xC000      STR      R12,[R1, #+0]
    378              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_62:
   \   00000562   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000564   0x2A01             CMP      R2,#+1
   \   00000566   0xD103             BNE.N    ??LPLD_SPI_Init_63
    379              { SPI0_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   00000568   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   0000056C   0x9A07             LDR      R2,[SP, #+28]
   \   0000056E   0x604A             STR      R2,[R1, #+4]
    380              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_63:
   \   00000570   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000572   0x2B01             CMP      R3,#+1
   \   00000574   0xD103             BNE.N    ??LPLD_SPI_Init_64
    381              { SPI0_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   00000576   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   0000057A   0x9A06             LDR      R2,[SP, #+24]
   \   0000057C   0x608A             STR      R2,[R1, #+8]
    382              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_64:
   \   0000057E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000580   0x2C01             CMP      R4,#+1
   \   00000582   0xD103             BNE.N    ??LPLD_SPI_Init_65
    383              { SPI0_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   00000584   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   00000588   0x9A05             LDR      R2,[SP, #+20]
   \   0000058A   0x60CA             STR      R2,[R1, #+12]
    384              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_65:
   \   0000058C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000058E   0x2D01             CMP      R5,#+1
   \   00000590   0xD106             BNE.N    ??LPLD_SPI_Init_66
   \   00000592   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000594   0x2F00             CMP      R7,#+0
   \   00000596   0xD103             BNE.N    ??LPLD_SPI_Init_66
    385              { SPI0_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000598   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   0000059C   0x9A04             LDR      R2,[SP, #+16]
   \   0000059E   0x610A             STR      R2,[R1, #+16]
    386              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_66:
   \   000005A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005A2   0x2E01             CMP      R6,#+1
   \   000005A4   0xD17A             BNE.N    ??LPLD_SPI_Init_67
   \   000005A6   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000005AA   0xF1BE 0x0F00      CMP      LR,#+0
   \   000005AE   0xD175             BNE.N    ??LPLD_SPI_Init_67
    387              { SPI0_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   000005B0   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   000005B4   0x9A03             LDR      R2,[SP, #+12]
   \   000005B6   0x614A             STR      R2,[R1, #+20]
   \   000005B8   0xE070             B.N      ??LPLD_SPI_Init_67
    388            }
    389            else if (spix == SPI1)
   \                     ??LPLD_SPI_Init_61:
   \   000005BA   0x.... 0x....      LDR.W    R12,??DataTable8_21  ;; 0x4002d000
   \   000005BE   0x4560             CMP      R0,R12
   \   000005C0   0xD134             BNE.N    ??LPLD_SPI_Init_68
    390            {
    391              if(tx_complete_int == TRUE)
   \   000005C2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005C4   0x2901             CMP      R1,#+1
   \   000005C6   0xD105             BNE.N    ??LPLD_SPI_Init_69
    392              { SPI1_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   000005C8   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000005CC   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \   000005D0   0xF8C1 0xC000      STR      R12,[R1, #+0]
    393              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_69:
   \   000005D4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005D6   0x2A01             CMP      R2,#+1
   \   000005D8   0xD103             BNE.N    ??LPLD_SPI_Init_70
    394              { SPI1_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000005DA   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000005DE   0x9A07             LDR      R2,[SP, #+28]
   \   000005E0   0x604A             STR      R2,[R1, #+4]
    395              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_70:
   \   000005E2   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000005E4   0x2B01             CMP      R3,#+1
   \   000005E6   0xD103             BNE.N    ??LPLD_SPI_Init_71
    396              { SPI1_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000005E8   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000005EC   0x9A06             LDR      R2,[SP, #+24]
   \   000005EE   0x608A             STR      R2,[R1, #+8]
    397              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_71:
   \   000005F0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005F2   0x2C01             CMP      R4,#+1
   \   000005F4   0xD103             BNE.N    ??LPLD_SPI_Init_72
    398              { SPI1_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000005F6   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000005FA   0x9A05             LDR      R2,[SP, #+20]
   \   000005FC   0x60CA             STR      R2,[R1, #+12]
    399              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_72:
   \   000005FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000600   0x2D01             CMP      R5,#+1
   \   00000602   0xD106             BNE.N    ??LPLD_SPI_Init_73
   \   00000604   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000606   0x2F00             CMP      R7,#+0
   \   00000608   0xD103             BNE.N    ??LPLD_SPI_Init_73
    400              { SPI1_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   0000060A   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   0000060E   0x9A04             LDR      R2,[SP, #+16]
   \   00000610   0x610A             STR      R2,[R1, #+16]
    401              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_73:
   \   00000612   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000614   0x2E01             CMP      R6,#+1
   \   00000616   0xD141             BNE.N    ??LPLD_SPI_Init_67
   \   00000618   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000061C   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000620   0xD13C             BNE.N    ??LPLD_SPI_Init_67
    402              { SPI1_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   00000622   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   00000626   0x9A03             LDR      R2,[SP, #+12]
   \   00000628   0x614A             STR      R2,[R1, #+20]
   \   0000062A   0xE037             B.N      ??LPLD_SPI_Init_67
    403            }
    404            else if (spix == SPI2)
   \                     ??LPLD_SPI_Init_68:
   \   0000062C   0x.... 0x....      LDR.W    R12,??DataTable8_34  ;; 0x400ac000
   \   00000630   0x4560             CMP      R0,R12
   \   00000632   0xD133             BNE.N    ??LPLD_SPI_Init_67
    405            {
    406              if(tx_complete_int == TRUE)
   \   00000634   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000636   0x2901             CMP      R1,#+1
   \   00000638   0xD105             BNE.N    ??LPLD_SPI_Init_74
    407              { SPI2_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   0000063A   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000063E   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \   00000642   0xF8C1 0xC000      STR      R12,[R1, #+0]
    408              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_74:
   \   00000646   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000648   0x2A01             CMP      R2,#+1
   \   0000064A   0xD103             BNE.N    ??LPLD_SPI_Init_75
    409              { SPI2_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   0000064C   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000650   0x9A07             LDR      R2,[SP, #+28]
   \   00000652   0x604A             STR      R2,[R1, #+4]
    410              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_75:
   \   00000654   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000656   0x2B01             CMP      R3,#+1
   \   00000658   0xD103             BNE.N    ??LPLD_SPI_Init_76
    411              { SPI2_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   0000065A   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000065E   0x9A06             LDR      R2,[SP, #+24]
   \   00000660   0x608A             STR      R2,[R1, #+8]
    412              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_76:
   \   00000662   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000664   0x2C01             CMP      R4,#+1
   \   00000666   0xD103             BNE.N    ??LPLD_SPI_Init_77
    413              { SPI2_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   00000668   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000066C   0x9A05             LDR      R2,[SP, #+20]
   \   0000066E   0x60CA             STR      R2,[R1, #+12]
    414              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_77:
   \   00000670   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000672   0x2D01             CMP      R5,#+1
   \   00000674   0xD106             BNE.N    ??LPLD_SPI_Init_78
   \   00000676   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000678   0x2F00             CMP      R7,#+0
   \   0000067A   0xD103             BNE.N    ??LPLD_SPI_Init_78
    415              { SPI2_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   0000067C   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000680   0x9A04             LDR      R2,[SP, #+16]
   \   00000682   0x610A             STR      R2,[R1, #+16]
    416              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_78:
   \   00000684   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000686   0x2E01             CMP      R6,#+1
   \   00000688   0xD108             BNE.N    ??LPLD_SPI_Init_67
   \   0000068A   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000068E   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000692   0xD103             BNE.N    ??LPLD_SPI_Init_67
    417              { SPI2_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   00000694   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000698   0x9A03             LDR      R2,[SP, #+12]
   \   0000069A   0x614A             STR      R2,[R1, #+20]
    418            }
    419            //配置SPI CTAR寄存器，设置SPI的总线时序
    420            spix->CTAR[0] = 0 & (~SPI_CTAR_LSBFE_MASK)
    421                                |SPI_CTAR_DBR_MASK  
    422                                |SPI_CTAR_PBR(0)           
    423                                |SPI_CTAR_FMSZ(7);        
   \                     ??LPLD_SPI_Init_67:
   \   0000069C   0xF05F 0x4138      MOVS     R1,#-1207959552
   \   000006A0   0x60C1             STR      R1,[R0, #+12]
    424                                 
    425            //设置SPI总线频率
    426            //SCK总线频率 = g_bus_clock/ SCK_DIV_x                                             
    427            spix->CTAR[0] |=SPI_CTAR_BR(sck_div);
   \   000006A2   0x68C1             LDR      R1,[R0, #+12]
   \   000006A4   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   000006A8   0xF012 0x020F      ANDS     R2,R2,#0xF
   \   000006AC   0x4311             ORRS     R1,R2,R1
   \   000006AE   0x60C1             STR      R1,[R0, #+12]
    428          
    429            //tCSC = (1/g_bus_clock) x PCSSCK x CSSCK
    430            //tCSC = 1/50,000,000 x PCSSCK x CSSCK
    431            spix->CTAR[0] |=SPI_CTAR_PCSSCK(1); 
   \   000006B0   0x68C1             LDR      R1,[R0, #+12]
   \   000006B2   0xF451 0x0180      ORRS     R1,R1,#0x400000
   \   000006B6   0x60C1             STR      R1,[R0, #+12]
    432            spix->CTAR[0] |=SPI_CTAR_CSSCK(1);  
   \   000006B8   0x68C1             LDR      R1,[R0, #+12]
   \   000006BA   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \   000006BE   0x60C1             STR      R1,[R0, #+12]
    433            
    434            //tDT = (1/g_bus_clock) x PDT x DT
    435            spix->CTAR[0] |=SPI_CTAR_DT(1);
   \   000006C0   0x68C1             LDR      R1,[R0, #+12]
   \   000006C2   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   000006C6   0x60C1             STR      R1,[R0, #+12]
    436            spix->CTAR[0] |=SPI_CTAR_PDT(1);
   \   000006C8   0x68C1             LDR      R1,[R0, #+12]
   \   000006CA   0xF451 0x2180      ORRS     R1,R1,#0x40000
   \   000006CE   0x60C1             STR      R1,[R0, #+12]
    437            
    438            //Config the Delay of the last edge of SCK and the negation of PCS
    439            //tASC = (1/g_bus_clock) x PASC x ASC
    440            spix->CTAR[0] |=SPI_CTAR_PASC(1);
   \   000006D0   0x68C1             LDR      R1,[R0, #+12]
   \   000006D2   0xF451 0x1180      ORRS     R1,R1,#0x100000
   \   000006D6   0x60C1             STR      R1,[R0, #+12]
    441            spix->CTAR[0] |=SPI_CTAR_ASC(1);
   \   000006D8   0x68C1             LDR      R1,[R0, #+12]
   \   000006DA   0xF451 0x7180      ORRS     R1,R1,#0x100
   \   000006DE   0x60C1             STR      R1,[R0, #+12]
    442            //清除标志位
    443            spix->SR =  SPI_SR_RFDF_MASK   
    444                        |SPI_SR_RFOF_MASK
    445                        |SPI_SR_TFFF_MASK
    446                        |SPI_SR_TFUF_MASK
    447                        |SPI_SR_TCF_MASK
    448                        |SPI_SR_EOQF_MASK;
   \   000006E0   0x.... 0x....      LDR.W    R1,??DataTable8_47  ;; 0x9a0a0000
   \   000006E4   0x62C1             STR      R1,[R0, #+44]
    449            //使能SPIx
    450            spix->MCR &=~SPI_MCR_HALT_MASK; 
   \   000006E6   0x6801             LDR      R1,[R0, #+0]
   \   000006E8   0x0849             LSRS     R1,R1,#+1
   \   000006EA   0x0049             LSLS     R1,R1,#+1
   \   000006EC   0x6001             STR      R1,[R0, #+0]
    451            
    452            return 1;
   \   000006EE   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Init_13:
   \   000006F0   0xB009             ADD      SP,SP,#+36
   \   000006F2   0xE8BD 0x0FF0      POP      {R4-R11}
   \   000006F6   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    453          }
    454          
    455          /*
    456           * LPLD_SPI_Deinit
    457           * SPI反初始化函数,在该函数中将SPI设置成为暂停模式，关闭SPI总线时钟，
    458           * 关闭SPI外设中断
    459           * 
    460           * 参数:
    461           *    spi_init_structure--SPI初始化结构体，
    462           *                        具体定义见SPI_InitTypeDef
    463           *
    464           * 输出:
    465           *    0--配置错误
    466           *    1--配置成功
    467           */

   \                                 In section .text, align 2, keep-with-next
    468          uint8 LPLD_SPI_Deinit(SPI_InitTypeDef spi_init_structure)
    469          {
   \                     LPLD_SPI_Deinit:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    470            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    471            spix->MCR |= SPI_MCR_HALT_MASK; //
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    472            if(spix == SPI0)
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable8_2  ;; 0x4002c000
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD10E             BNE.N    ??LPLD_SPI_Deinit_0
    473            {
    474              disable_irq(SPI0_IRQn);
   \   00000016   0x201A             MOVS     R0,#+26
   \   00000018   0x.... 0x....      BL       NVIC_DisableIRQ
    475              SIM->SCGC6 &= ~SIM_SCGC6_DSPI0_MASK;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    476            }
    477            else if(spix == SPI1)
    478            {
    479              disable_irq(SPI1_IRQn);
    480              SIM->SCGC6 &= ~SIM_SCGC6_SPI1_MASK;
    481            }
    482            else if(spix == SPI2)
    483            {
    484              disable_irq(SPI2_IRQn);
    485              SIM->SCGC3 &= ~SIM_SCGC3_SPI2_MASK;
    486            }
    487            else
    488              return 0;
    489            return 1;
   \                     ??LPLD_SPI_Deinit_1:
   \   0000002C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Deinit_2:
   \   0000002E   0xBC02             POP      {R1}
   \   00000030   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_Deinit_0:
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x4002d000
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD10B             BNE.N    ??LPLD_SPI_Deinit_3
   \   0000003C   0x201B             MOVS     R0,#+27
   \   0000003E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000050   0x6008             STR      R0,[R1, #+0]
   \   00000052   0xE7EB             B.N      ??LPLD_SPI_Deinit_1
   \                     ??LPLD_SPI_Deinit_3:
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD10B             BNE.N    ??LPLD_SPI_Deinit_4
   \   0000005C   0x201C             MOVS     R0,#+28
   \   0000005E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable8_35  ;; 0x40048030
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable8_35  ;; 0x40048030
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE7DB             B.N      ??LPLD_SPI_Deinit_1
   \                     ??LPLD_SPI_Deinit_4:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE7DA             B.N      ??LPLD_SPI_Deinit_2
    490          }
    491          
    492          /*
    493           * LPLD_SPI_EnableIrq
    494           * 使能SPI外设中断
    495           * 
    496           * 参数:
    497           *    spi_init_structure--SPI初始化结构体，
    498           *                        具体定义见SPI_InitTypeDef
    499           *
    500           * 输出:
    501           *    0--配置错误
    502           *    1--配置成功
    503           */

   \                                 In section .text, align 2, keep-with-next
    504          uint8 LPLD_SPI_EnableIrq(SPI_InitTypeDef spi_init_structure)
    505          {
   \                     LPLD_SPI_EnableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    506            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    507            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R1,??DataTable8_2  ;; 0x4002c000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD106             BNE.N    ??LPLD_SPI_EnableIrq_0
    508            {
    509              enable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_EnableIRQ
    510            }
    511            else if(spix == SPI1)
    512            {
    513              enable_irq(SPI1_IRQn);
    514            }
    515            else if(spix == SPI2)
    516            {
    517              enable_irq(SPI2_IRQn);
    518            }
    519            else
    520              return 0;
    521          
    522            return 1;
   \                     ??LPLD_SPI_EnableIrq_1:
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_EnableIrq_2:
   \   00000014   0xBC02             POP      {R1}
   \   00000016   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_EnableIrq_0:
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x4002d000
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_3
   \   00000022   0x201B             MOVS     R0,#+27
   \   00000024   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000028   0xE7F3             B.N      ??LPLD_SPI_EnableIrq_1
   \                     ??LPLD_SPI_EnableIrq_3:
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_4
   \   00000032   0x201C             MOVS     R0,#+28
   \   00000034   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000038   0xE7EB             B.N      ??LPLD_SPI_EnableIrq_1
   \                     ??LPLD_SPI_EnableIrq_4:
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE7EA             B.N      ??LPLD_SPI_EnableIrq_2
    523          }
    524          
    525          /*
    526           * LPLD_SPI_EnableIrq
    527           * 禁止SPI外设中断
    528           * 
    529           * 参数:
    530           *    spi_init_structure--SPI初始化结构体，
    531           *                        具体定义见SPI_InitTypeDef
    532           *
    533           * 输出:
    534           *    0--配置错误
    535           *    1--配置成功
    536           */

   \                                 In section .text, align 2, keep-with-next
    537          uint8 LPLD_SPI_DisableIrq(SPI_InitTypeDef spi_init_structure)
    538          {
   \                     LPLD_SPI_DisableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    539            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    540            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R1,??DataTable8_2  ;; 0x4002c000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD106             BNE.N    ??LPLD_SPI_DisableIrq_0
    541            {
    542              disable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
    543            }
    544            else if(spix == SPI1)
    545            {
    546              disable_irq(SPI1_IRQn);
    547            }
    548            else if(spix == SPI2)
    549            {
    550              disable_irq(SPI2_IRQn);
    551            }
    552            else
    553              return 0;
    554            return 1;
   \                     ??LPLD_SPI_DisableIrq_1:
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_DisableIrq_2:
   \   00000014   0xBC02             POP      {R1}
   \   00000016   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_DisableIrq_0:
   \   0000001A   0x....             LDR.N    R1,??DataTable8_21  ;; 0x4002d000
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_3
   \   00000020   0x201B             MOVS     R0,#+27
   \   00000022   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000026   0xE7F4             B.N      ??LPLD_SPI_DisableIrq_1
   \                     ??LPLD_SPI_DisableIrq_3:
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_4
   \   00000030   0x201C             MOVS     R0,#+28
   \   00000032   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000036   0xE7EC             B.N      ??LPLD_SPI_DisableIrq_1
   \                     ??LPLD_SPI_DisableIrq_4:
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EB             B.N      ??LPLD_SPI_DisableIrq_2
    555          }
    556          
    557          /*
    558           * LPLD_SPI_Master_WriteRead
    559           * K60主机SPI向从机写数据，并读取从机数据
    560           * 
    561           * 参数:
    562           *    spix--SPI选择
    563           *      |__SPI0 -选择SPI0模块
    564           *      |__SPI1 -选择SPI1模块
    565           *      |__SPI2 -选择SPI2模块
    566           *    data--要发送数据
    567           *      |__单位为一个字节，8位
    568           *    pcsx--CS片选端口号
    569           *      |__SPI_PCS0 -0号片选(SPI0、SPI1、SPI2含有)
    570           *      |__SPI_PCS1 -1号片选(SPI0、SPI1、SPI2含有)
    571           *      |__SPI_PCS2 -2号片选(SPI0、SPI1含有)
    572           *      |__SPI_PCS3 -3号片选(SPI0、SPI1含有)
    573           *      |__SPI_PCS4 -4号片选(SPI0含有)
    574           *      |__SPI_PCS5 -5号片选(SPI0含有)
    575           *    pcs_state--一帧数据传输完成后CS的状态
    576           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    577           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    578           * 输出:
    579           *    读取从机8位的数据
    580           */

   \                                 In section .text, align 2, keep-with-next
    581          uint8 LPLD_SPI_Master_WriteRead(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    582          {
    583            uint8 temp;
    584            
    585            spix->PUSHR  = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT))&SPI_PUSHR_CONT_MASK)
    586                         |SPI_PUSHR_CTAS(0)
    587                         |SPI_PUSHR_PCS(pcsx)
    588                         |data;                 
   \                     LPLD_SPI_Master_WriteRead:
   \   00000000   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xF412 0x127C      ANDS     R2,R2,#0x3F0000
   \   0000000A   0xEA52 0x72C3      ORRS     R2,R2,R3, LSL #+31
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x4311             ORRS     R1,R1,R2
   \   00000012   0x6341             STR      R1,[R0, #+52]
    589            
    590            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_WriteRead_0:
   \   00000014   0x6AC1             LDR      R1,[R0, #+44]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_0
    591            spix->SR |= SPI_SR_TCF_MASK ;               
   \   0000001A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000001C   0xF051 0x4100      ORRS     R1,R1,#0x80000000
   \   00000020   0x62C1             STR      R1,[R0, #+44]
    592            
    593            while(!(spix->SR & SPI_SR_RFDF_MASK)); 
   \                     ??LPLD_SPI_Master_WriteRead_1:
   \   00000022   0x6AC1             LDR      R1,[R0, #+44]
   \   00000024   0x0389             LSLS     R1,R1,#+14
   \   00000026   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_1
    594            temp = (uint8)(spix->POPR & 0xff);           
   \   00000028   0x6B81             LDR      R1,[R0, #+56]
    595            spix->SR |= SPI_SR_RFDF_MASK;                
   \   0000002A   0x6AC2             LDR      R2,[R0, #+44]
   \   0000002C   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   00000030   0x62C2             STR      R2,[R0, #+44]
    596            return temp;
   \   00000032   0x0008             MOVS     R0,R1
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x4770             BX       LR               ;; return
    597            
    598          }
    599          
    600          /*
    601           * LPLD_SPI_Master_Read
    602           * K60主机读取从机数据
    603           * 
    604           * 参数:
    605           *    spix--SPI选择
    606           *      |__SPI0 -选择SPI0模块
    607           *      |__SPI1 -选择SPI1模块
    608           *      |__SPI2 -选择SPI2模块
    609           * 输出:
    610           *    读取从机8位的数据
    611           */

   \                                 In section .text, align 2, keep-with-next
    612          uint8 LPLD_SPI_Master_Read(SPI_Type *spix)
    613          {
    614            uint8 temp;
    615          
    616            while(!(spix->SR & SPI_SR_RFDF_MASK)); //=1 RIFO is not empty
   \                     LPLD_SPI_Master_Read:
   \                     ??LPLD_SPI_Master_Read_0:
   \   00000000   0x6AC1             LDR      R1,[R0, #+44]
   \   00000002   0x0389             LSLS     R1,R1,#+14
   \   00000004   0xD5FC             BPL.N    ??LPLD_SPI_Master_Read_0
    617            temp=(uint8)spix->POPR;
   \   00000006   0x6B81             LDR      R1,[R0, #+56]
    618            spix->SR |=SPI_SR_RFDF_MASK;
   \   00000008   0x6AC2             LDR      R2,[R0, #+44]
   \   0000000A   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   0000000E   0x62C2             STR      R2,[R0, #+44]
    619          
    620            return temp;
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x4770             BX       LR               ;; return
    621          }
    622          /*
    623           * LPLD_SPI_Master_Write
    624           * K60主机SPI向从机写数据
    625           * 
    626           * 参数:
    627           *    spix--SPI选择
    628           *      |__SPI0 -选择SPI0模块
    629           *      |__SPI1 -选择SPI1模块
    630           *      |__SPI2 -选择SPI2模块
    631           *    data--要发送数据
    632           *      |__单位为一个字节，8位
    633           *    pcsx--CS片选端口号
    634           *      |__SPI_PCS0  -0号片选(SPI0、SPI1、SPI2含有)
    635           *      |__SPI_PCS1  -1号片选(SPI0、SPI1、SPI2含有)
    636           *      |__SPI_PCS2  -2号片选(SPI0、SPI1含有)
    637           *      |__SPI_PCS3  -3号片选(SPI0、SPI1含有)
    638           *      |__SPI_PCS4  -4号片选(SPI0含有)
    639           *      |__SPI_PCS5  -5号片选(SPI0含有)
    640           *    pcs_state--一帧数据传输完成后CS的状态
    641           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    642           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    643           */

   \                                 In section .text, align 2, keep-with-next
    644          void LPLD_SPI_Master_Write(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    645          {  
    646            
    647            spix->PUSHR = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT)) & SPI_PUSHR_CONT_MASK)
    648                         |SPI_PUSHR_CTAS(0)
    649                         |SPI_PUSHR_PCS(pcsx)
    650                         |data; 
   \                     LPLD_SPI_Master_Write:
   \   00000000   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xF412 0x127C      ANDS     R2,R2,#0x3F0000
   \   0000000A   0xEA52 0x72C3      ORRS     R2,R2,R3, LSL #+31
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x4311             ORRS     R1,R1,R2
   \   00000012   0x6341             STR      R1,[R0, #+52]
    651          
    652            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_Write_0:
   \   00000014   0x6AC1             LDR      R1,[R0, #+44]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD5FC             BPL.N    ??LPLD_SPI_Master_Write_0
    653            spix->SR |= SPI_SR_TCF_MASK ;            
   \   0000001A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000001C   0xF051 0x4100      ORRS     R1,R1,#0x80000000
   \   00000020   0x62C1             STR      R1,[R0, #+44]
    654          }
   \   00000022   0x4770             BX       LR               ;; return
    655          
    656          

   \                                 In section .text, align 2, keep-with-next
    657          void SPI0_IRQHandler(void)
    658          {
   \                     SPI0_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    659          #if (UCOS_II > 0u)
    660            OS_CPU_SR  cpu_sr = 0u;
    661            OS_ENTER_CRITICAL(); 
    662            OSIntEnter();
    663            OS_EXIT_CRITICAL();
    664          #endif
    665            if( SPI0->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI0_IRQHandler_0
    666            {
    667              SPI0_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_44
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    668              SPI0->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI0_IRQHandler_1
    669            }
    670            else if( SPI0->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI0_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI0_IRQHandler_2
    671            {
    672              SPI0_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_44
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    673              SPI0->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI0_IRQHandler_1
    674            }
    675            else if( SPI0->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI0_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI0_IRQHandler_3
    676            {
    677              SPI0_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_44
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    678              SPI0->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI0_IRQHandler_1
    679            }
    680            else if( SPI0->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI0_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI0_IRQHandler_4
    681            {  
    682              SPI0_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_44
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    683              SPI0->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI0_IRQHandler_1
    684            }
    685            else if( SPI0->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI0_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI0_IRQHandler_5
    686            {   
    687              SPI0_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_44
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    688              SPI0->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI0_IRQHandler_1
    689            }
    690            else if( SPI0->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI0_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI0_IRQHandler_1
    691            {
    692              SPI0_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_44
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    693              SPI0->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    694            }
    695          #if (UCOS_II > 0u)
    696            OSIntExit();          
    697          #endif
    698          }
   \                     ??SPI0_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    699          
    700          

   \                                 In section .text, align 2, keep-with-next
    701          void SPI1_IRQHandler(void)
    702          {
   \                     SPI1_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    703          #if (UCOS_II > 0u)
    704            OS_CPU_SR  cpu_sr = 0u;
    705            OS_ENTER_CRITICAL(); 
    706            OSIntEnter();
    707            OS_EXIT_CRITICAL();
    708          #endif
    709            if( SPI1->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI1_IRQHandler_0
    710            {
    711              SPI1_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_45
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    712              SPI1->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI1_IRQHandler_1
    713            }
    714            else if( SPI1->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI1_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI1_IRQHandler_2
    715            {
    716              SPI1_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_45
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    717              SPI1->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI1_IRQHandler_1
    718            }
    719            else if( SPI1->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI1_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI1_IRQHandler_3
    720            {
    721              SPI1_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_45
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    722              SPI1->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI1_IRQHandler_1
    723            }
    724            else if( SPI1->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI1_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI1_IRQHandler_4
    725            {  
    726              SPI1_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_45
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    727              SPI1->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI1_IRQHandler_1
    728            }
    729            else if( SPI1->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI1_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI1_IRQHandler_5
    730            {   
    731              SPI1_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_45
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    732              SPI1->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI1_IRQHandler_1
    733            }
    734            else if( SPI1->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI1_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI1_IRQHandler_1
    735            {
    736              SPI1_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_45
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    737              SPI1->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    738            }
    739          #if (UCOS_II > 0u)
    740            OSIntExit();         
    741          #endif
    742          }
   \                     ??SPI1_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    743          
    744          

   \                                 In section .text, align 2, keep-with-next
    745          void SPI2_IRQHandler(void)
    746          {
   \                     SPI2_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    747          #if (UCOS_II > 0u)
    748            OS_CPU_SR  cpu_sr = 0u;
    749            OS_ENTER_CRITICAL(); 
    750            OSIntEnter();
    751            OS_EXIT_CRITICAL();
    752          #endif
    753            if( SPI2->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI2_IRQHandler_0
    754            {
    755              SPI2_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_46
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    756              SPI2->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI2_IRQHandler_1
    757            }
    758            else if( SPI2->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI2_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI2_IRQHandler_2
    759            {
    760              SPI2_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_46
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    761              SPI2->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI2_IRQHandler_1
    762            }
    763            else if( SPI2->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI2_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI2_IRQHandler_3
    764            {
    765              SPI2_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_46
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    766              SPI2->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI2_IRQHandler_1
    767            }
    768            else if( SPI2->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI2_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI2_IRQHandler_4
    769            {  
    770              SPI2_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_46
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    771              SPI2->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI2_IRQHandler_1
    772            }
    773            else if( SPI2->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI2_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI2_IRQHandler_5
    774            {   
    775              SPI2_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_46
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    776              SPI2->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI2_IRQHandler_1
    777            }
    778            else if( SPI2->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI2_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI2_IRQHandler_1
    779            {
    780              SPI2_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_46
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    781              SPI2->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    782            }
    783          #if (UCOS_II > 0u)
    784            OSIntExit();          
    785          #endif
    786          }
   \                     ??SPI2_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x4004B018         DC32     0x4004b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x003F0C01         DC32     0x3f0c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x4004A024         DC32     0x4004a024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x400AC000         DC32     0x400ac000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_42:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_43:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_44:
   \   00000000   0x........         DC32     SPI0_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_45:
   \   00000000   0x........         DC32     SPI1_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_46:
   \   00000000   0x........         DC32     SPI2_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_47:
   \   00000000   0x9A0A0000         DC32     0x9a0a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_48:
   \   00000000   0x4002C02C         DC32     0x4002c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_49:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_50:
   \   00000000   0x400AC02C         DC32     0x400ac02c
    787          
    788          
    789          
    790          
    791          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  LPLD_SPI_Deinit
             24 -> NVIC_DisableIRQ
       24  LPLD_SPI_DisableIrq
             24 -> NVIC_DisableIRQ
       24  LPLD_SPI_EnableIrq
             24 -> NVIC_EnableIRQ
       88  LPLD_SPI_Init
        0  LPLD_SPI_Master_Read
        0  LPLD_SPI_Master_Write
        0  LPLD_SPI_Master_WriteRead
        0  NVIC_DisableIRQ
        0  NVIC_EnableIRQ
        8  SPI0_IRQHandler
              8 -- Indirect call
        8  SPI1_IRQHandler
              8 -- Indirect call
        8  SPI2_IRQHandler
              8 -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_42
       4  ??DataTable8_43
       4  ??DataTable8_44
       4  ??DataTable8_45
       4  ??DataTable8_46
       4  ??DataTable8_47
       4  ??DataTable8_48
       4  ??DataTable8_49
       4  ??DataTable8_5
       4  ??DataTable8_50
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     120  LPLD_SPI_Deinit
      60  LPLD_SPI_DisableIrq
      62  LPLD_SPI_EnableIrq
    1786  LPLD_SPI_Init
      22  LPLD_SPI_Master_Read
      36  LPLD_SPI_Master_Write
      56  LPLD_SPI_Master_WriteRead
      24  NVIC_DisableIRQ
      24  NVIC_EnableIRQ
     170  SPI0_IRQHandler
      24  SPI0_ISR
     170  SPI1_IRQHandler
      24  SPI1_ISR
     170  SPI2_IRQHandler
      24  SPI2_ISR

 
    72 bytes in section .bss
 2 904 bytes in section .text
 
 2 904 bytes of CODE memory
    72 bytes of DATA memory

Errors: none
Warnings: none
