###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     16/Feb/2014  16:24:49 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c #
#    Command line =  C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c #
#                     -D LPLD_K60 -lCN "C:\embed\LPLD\LPLD_OSKinetis_V3\proje #
#                    ct\04-(UART)LPLD_SerialComm\iar\RAM\List\" -lB           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\RAM\List\" -o                              #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\RAM\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(U #
#                    ART)LPLD_SerialComm\iar\..\app\" -I                      #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\CPU\" -I                      #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\common\" -I                   #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\" -I                     #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\HW\" -I                  #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\LPLD\DEV\" -I                 #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\uCOS-II\Ports\" -I            #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\uCOS-II\Source\" -I           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\FatFs\" -I                    #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\FatFs\option\" -I             #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\common\" -I               #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\driver\" -I               #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\descriptor\" -I           #
#                    "C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_S #
#                    erialComm\iar\..\..\..\lib\USB\class\" -Ol -I            #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\" -D ARM_MATH_CM4                  #
#    List file    =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_Se #
#                    rialComm\iar\RAM\List\HW_FLEXBUS.lst                     #
#    Object file  =  C:\embed\LPLD\LPLD_OSKinetis_V3\project\04-(UART)LPLD_Se #
#                    rialComm\iar\RAM\Obj\HW_FLEXBUS.o                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\embed\LPLD\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c
      1          /**
      2           * @file HW_FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "HW_FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \   00000000   0x4004C018         DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004C014   
   \              0x4004C010   
   \              0x4004C00C   
   \              0x4004C008   
   \              0x4004B028   
   \   00000018   0x4004B024         DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004B020   
   \              0x4004B01C   
   \              0x4004B018   
   \              0x4004B014   
   \              0x4004B010   
   \   00000030   0x4004B008         DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004B004   
   \              0x4004B000   
   \              0x4004A048   
   \              0x4004A044   
   \              0x4004A040   
   \   00000048   0x4004A02C         DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004A028   
   \              0x4004A024   
   \              0x4004A020   
   \              0x4004A01C   
   \              0x4004A018   
   \   00000060   0x4004B03C         DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004B038   
   \              0x4004B034   
   \              0x4004B030   
   \              0x4004A05C   
   \              0x4004A058   
   \   00000078   0x4004A054         DC32 4004A054H, 4004A050H
   \              0x4004A050   
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * LPLD_FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 LPLD_FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     LPLD_FlexBus_Init:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x43F0      PUSH     {R4-R9,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \   00000006   0xF89D 0x401C      LDRB     R4,[SP, #+28]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \   0000000A   0xF8DD 0xC020      LDR      R12,[SP, #+32]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \   0000000E   0x9809             LDR      R0,[SP, #+36]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \   00000010   0xF89D 0x1028      LDRB     R1,[SP, #+40]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \   00000014   0xF89D 0x2029      LDRB     R2,[SP, #+41]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \   00000018   0xF89D 0xE02A      LDRB     LR,[SP, #+42]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \   0000001C   0xF89D 0x502B      LDRB     R5,[SP, #+43]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \   00000020   0xF89D 0x602C      LDRB     R6,[SP, #+44]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \   00000024   0xF89D 0x702D      LDRB     R7,[SP, #+45]
     58            uint32* pcr;
     59            uint8 n=0;
   \   00000028   0x2300             MOVS     R3,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
     64            ASSERT( addr_space != 0);    //寻址空间大小
     65            ASSERT( size <= 3);    //判断数据位宽
     66            ASSERT( rah <= 3);     //判断读地址保持时间
     67            ASSERT( wah <= 3);     //判断写地址保持时间
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0xF05F 0x080C      MOVS     R8,#+12
   \   00000030   0xF8DF 0x9258      LDR.W    R9,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000034   0xFB08 0x9804      MLA      R8,R8,R4,R9
   \   00000038   0xF05F 0x0900      MOVS     R9,#+0
   \   0000003C   0xF8C8 0x9004      STR      R9,[R8, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0xF05F 0x080C      MOVS     R8,#+12
   \   00000046   0xF8DF 0x9244      LDR.W    R9,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   0000004A   0xFB08 0x9804      MLA      R8,R8,R4,R9
   \   0000004E   0xF8C8 0xC000      STR      R12,[R8, #+0]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0xF05F 0x0C0C      MOVS     R12,#+12
   \   00000058   0xF8DF 0x8230      LDR.W    R8,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   0000005C   0xFB0C 0x8C04      MLA      R12,R12,R4,R8
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0xEA5F 0x1881      LSLS     R8,R1,#+6
   \   00000066   0xF018 0x08C0      ANDS     R8,R8,#0xC0
   \   0000006A   0xF8CC 0x8008      STR      R8,[R12, #+8]
     75            
     76            if(justied)
   \   0000006E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0x2A00             CMP      R2,#+0
   \   00000072   0xD011             BEQ.N    ??LPLD_FlexBus_Init_1
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x230C             MOVS     R3,#+12
   \   00000078   0xF8DF 0xC210      LDR.W    R12,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   0000007C   0xFB03 0xC304      MLA      R3,R3,R4,R12
   \   00000080   0x689B             LDR      R3,[R3, #+8]
   \   00000082   0xF453 0x7300      ORRS     R3,R3,#0x200
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0xF05F 0x0C0C      MOVS     R12,#+12
   \   0000008C   0xF8DF 0x81FC      LDR.W    R8,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000090   0xFB0C 0x8C04      MLA      R12,R12,R4,R8
   \   00000094   0xF8CC 0x3008      STR      R3,[R12, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??LPLD_FlexBus_Init_1:
   \   00000098   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000009C   0xF1BE 0x0F00      CMP      LR,#+0
   \   000000A0   0xD011             BEQ.N    ??LPLD_FlexBus_Init_2
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0x230C             MOVS     R3,#+12
   \   000000A6   0xF8DF 0xC1E4      LDR.W    R12,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000AA   0xFB03 0xC304      MLA      R3,R3,R4,R12
   \   000000AE   0x689B             LDR      R3,[R3, #+8]
   \   000000B0   0xF453 0x7380      ORRS     R3,R3,#0x100
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0xF05F 0x0C0C      MOVS     R12,#+12
   \   000000BA   0xF8DF 0xE1D0      LDR.W    LR,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000BE   0xFB0C 0xEC04      MLA      R12,R12,R4,LR
   \   000000C2   0xF8CC 0x3008      STR      R3,[R12, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??LPLD_FlexBus_Init_2:
   \   000000C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C8   0x230C             MOVS     R3,#+12
   \   000000CA   0xF8DF 0xC1C0      LDR.W    R12,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000CE   0xFB03 0xC304      MLA      R3,R3,R4,R12
   \   000000D2   0x689B             LDR      R3,[R3, #+8]
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x02AD             LSLS     R5,R5,#+10
   \   000000D8   0xF415 0x457C      ANDS     R5,R5,#0xFC00
   \   000000DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000DE   0x04B6             LSLS     R6,R6,#+18
   \   000000E0   0xF416 0x2640      ANDS     R6,R6,#0xC0000
   \   000000E4   0x4335             ORRS     R5,R6,R5
   \   000000E6   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000E8   0x043E             LSLS     R6,R7,#+16
   \   000000EA   0xF416 0x3640      ANDS     R6,R6,#0x30000
   \   000000EE   0x4335             ORRS     R5,R6,R5
   \   000000F0   0x432B             ORRS     R3,R5,R3
   \   000000F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F4   0x250C             MOVS     R5,#+12
   \   000000F6   0x4E65             LDR.N    R6,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000F8   0xFB05 0x6504      MLA      R5,R5,R4,R6
   \   000000FC   0x60AB             STR      R3,[R5, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \   000000FE   0x1E40             SUBS     R0,R0,#+1
   \   00000100   0x0C00             LSRS     R0,R0,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x230C             MOVS     R3,#+12
   \   00000106   0x4D61             LDR.N    R5,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000108   0xFB03 0x5304      MLA      R3,R3,R4,R5
   \   0000010C   0x0405             LSLS     R5,R0,#+16
   \   0000010E   0xF055 0x0501      ORRS     R5,R5,#0x1
   \   00000112   0x605D             STR      R5,[R3, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \   00000114   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000116   0x2C00             CMP      R4,#+0
   \   00000118   0xD104             BNE.N    ??LPLD_FlexBus_Init_3
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \   0000011A   0x4B5D             LDR.N    R3,??LPLD_FlexBus_Init_0+0x4  ;; 0x4004c004
   \   0000011C   0xF44F 0x64A0      MOV      R4,#+1280
   \   00000120   0x601C             STR      R4,[R3, #+0]
   \   00000122   0xE05E             B.N      ??LPLD_FlexBus_Init_4
     99            }
    100            else if(Fbx == FB1)
   \                     ??LPLD_FlexBus_Init_3:
   \   00000124   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000126   0x2C01             CMP      R4,#+1
   \   00000128   0xD110             BNE.N    ??LPLD_FlexBus_Init_5
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \   0000012A   0x4B5A             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000012C   0x681B             LDR      R3,[R3, #+0]
   \   0000012E   0x011B             LSLS     R3,R3,#+4        ;; ZeroExtS R3,R3,#+4,#+4
   \   00000130   0x091B             LSRS     R3,R3,#+4
   \   00000132   0x4C58             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000134   0x6023             STR      R3,[R4, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \   00000136   0x4B57             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000138   0x681B             LDR      R3,[R3, #+0]
   \   0000013A   0xF053 0x5380      ORRS     R3,R3,#0x10000000
   \   0000013E   0x4C55             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000140   0x6023             STR      R3,[R4, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \   00000142   0x4B55             LDR.N    R3,??LPLD_FlexBus_Init_0+0xC  ;; 0x4004c000
   \   00000144   0xF44F 0x64A0      MOV      R4,#+1280
   \   00000148   0x601C             STR      R4,[R3, #+0]
   \   0000014A   0xE04A             B.N      ??LPLD_FlexBus_Init_4
    105            }
    106            else if(Fbx == FB2)
   \                     ??LPLD_FlexBus_Init_5:
   \   0000014C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014E   0x2C02             CMP      R4,#+2
   \   00000150   0xD110             BNE.N    ??LPLD_FlexBus_Init_6
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \   00000152   0x4B50             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000154   0x681B             LDR      R3,[R3, #+0]
   \   00000156   0xF433 0x2370      BICS     R3,R3,#0xF0000
   \   0000015A   0x4C4E             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000015C   0x6023             STR      R3,[R4, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \   0000015E   0x4B4D             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000160   0x681B             LDR      R3,[R3, #+0]
   \   00000162   0xF453 0x3380      ORRS     R3,R3,#0x10000
   \   00000166   0x4C4B             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000168   0x6023             STR      R3,[R4, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \   0000016A   0x4B4C             LDR.N    R3,??LPLD_FlexBus_Init_0+0x10  ;; 0x4004b048
   \   0000016C   0xF44F 0x64A0      MOV      R4,#+1280
   \   00000170   0x601C             STR      R4,[R3, #+0]
   \   00000172   0xE036             B.N      ??LPLD_FlexBus_Init_4
    111            }
    112            else if(Fbx == FB3)
   \                     ??LPLD_FlexBus_Init_6:
   \   00000174   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000176   0x2C03             CMP      R4,#+3
   \   00000178   0xD110             BNE.N    ??LPLD_FlexBus_Init_7
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \   0000017A   0x4B46             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000017C   0x681B             LDR      R3,[R3, #+0]
   \   0000017E   0xF433 0x4370      BICS     R3,R3,#0xF000
   \   00000182   0x4C44             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000184   0x6023             STR      R3,[R4, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \   00000186   0x4B43             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000188   0x681B             LDR      R3,[R3, #+0]
   \   0000018A   0xF453 0x5380      ORRS     R3,R3,#0x1000
   \   0000018E   0x4C41             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000190   0x6023             STR      R3,[R4, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \   00000192   0x4B43             LDR.N    R3,??LPLD_FlexBus_Init_0+0x14  ;; 0x4004b04c
   \   00000194   0xF44F 0x64A0      MOV      R4,#+1280
   \   00000198   0x601C             STR      R4,[R3, #+0]
   \   0000019A   0xE022             B.N      ??LPLD_FlexBus_Init_4
    117            }
    118            else if(Fbx == FB4)
   \                     ??LPLD_FlexBus_Init_7:
   \   0000019C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000019E   0x2C04             CMP      R4,#+4
   \   000001A0   0xD10E             BNE.N    ??LPLD_FlexBus_Init_8
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \   000001A2   0x4B3C             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001A4   0x681B             LDR      R3,[R3, #+0]
   \   000001A6   0xF033 0x6370      BICS     R3,R3,#0xF000000
   \   000001AA   0x4C3A             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001AC   0x6023             STR      R3,[R4, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \   000001AE   0x4B39             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001B0   0x4C38             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001B2   0x6824             LDR      R4,[R4, #+0]
   \   000001B4   0x601C             STR      R4,[R3, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \   000001B6   0x4B3B             LDR.N    R3,??LPLD_FlexBus_Init_0+0x18  ;; 0x4004b044
   \   000001B8   0xF44F 0x64A0      MOV      R4,#+1280
   \   000001BC   0x601C             STR      R4,[R3, #+0]
   \   000001BE   0xE010             B.N      ??LPLD_FlexBus_Init_4
    123            }
    124            else if(Fbx == FB5)
   \                     ??LPLD_FlexBus_Init_8:
   \   000001C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001C2   0x2C05             CMP      R4,#+5
   \   000001C4   0xD10D             BNE.N    ??LPLD_FlexBus_Init_4
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \   000001C6   0x4B33             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001C8   0x681B             LDR      R3,[R3, #+0]
   \   000001CA   0xF433 0x0370      BICS     R3,R3,#0xF00000
   \   000001CE   0x4C31             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001D0   0x6023             STR      R3,[R4, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \   000001D2   0x4B30             LDR.N    R3,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001D4   0x4C2F             LDR.N    R4,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001D6   0x6824             LDR      R4,[R4, #+0]
   \   000001D8   0x601C             STR      R4,[R3, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \   000001DA   0x4B33             LDR.N    R3,??LPLD_FlexBus_Init_0+0x1C  ;; 0x4004b040
   \   000001DC   0xF44F 0x64A0      MOV      R4,#+1280
   \   000001E0   0x601C             STR      R4,[R3, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??LPLD_FlexBus_Init_4:
   \   000001E2   0x2300             MOVS     R3,#+0
   \   000001E4   0xE007             B.N      ??LPLD_FlexBus_Init_9
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_10:
   \   000001E6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001E8   0x4C30             LDR.N    R4,??LPLD_FlexBus_Init_0+0x20
   \   000001EA   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
    136              *pcr = PORT_PCR_MUX(5);    
   \   000001EE   0xF44F 0x65A0      MOV      R5,#+1280
   \   000001F2   0x6025             STR      R5,[R4, #+0]
    137            }
   \   000001F4   0x1C5B             ADDS     R3,R3,#+1
   \                     ??LPLD_FlexBus_Init_9:
   \   000001F6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001F8   0x2B10             CMP      R3,#+16
   \   000001FA   0xD3F4             BCC.N    ??LPLD_FlexBus_Init_10
    138            //使能其余的地址总线
    139            n=16;
   \   000001FC   0x2310             MOVS     R3,#+16
    140            for(uint8 i=0; i<16; i++)
   \   000001FE   0x2500             MOVS     R5,#+0
   \   00000200   0xE00C             B.N      ??LPLD_FlexBus_Init_11
    141            {
    142              if((addr_space>>i)&0x01)
   \                     ??LPLD_FlexBus_Init_12:
   \   00000202   0xFA30 0xF405      LSRS     R4,R0,R5
   \   00000206   0x07E4             LSLS     R4,R4,#+31
   \   00000208   0xD507             BPL.N    ??LPLD_FlexBus_Init_13
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \   0000020A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000020C   0x4C27             LDR.N    R4,??LPLD_FlexBus_Init_0+0x20
   \   0000020E   0xF854 0x4023      LDR      R4,[R4, R3, LSL #+2]
   \   00000212   0x1C5B             ADDS     R3,R3,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \   00000214   0xF44F 0x66A0      MOV      R6,#+1280
   \   00000218   0x6026             STR      R6,[R4, #+0]
    146              }
    147            }
   \                     ??LPLD_FlexBus_Init_13:
   \   0000021A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_FlexBus_Init_11:
   \   0000021C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000021E   0x2D10             CMP      R5,#+16
   \   00000220   0xD3EF             BCC.N    ??LPLD_FlexBus_Init_12
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \   00000222   0x2300             MOVS     R3,#+0
    150            if(size == 0)
   \   00000224   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000226   0x2900             CMP      R1,#+0
   \   00000228   0xD101             BNE.N    ??LPLD_FlexBus_Init_14
    151            {   
    152              n=16;
   \   0000022A   0x2310             MOVS     R3,#+16
   \   0000022C   0xE00E             B.N      ??LPLD_FlexBus_Init_15
    153            }else if(justied==0 && size == 0x10)
   \                     ??LPLD_FlexBus_Init_14:
   \   0000022E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000230   0x2A00             CMP      R2,#+0
   \   00000232   0xD104             BNE.N    ??LPLD_FlexBus_Init_16
   \   00000234   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000236   0x2910             CMP      R1,#+16
   \   00000238   0xD101             BNE.N    ??LPLD_FlexBus_Init_16
    154            {
    155              n=16;
   \   0000023A   0x2310             MOVS     R3,#+16
   \   0000023C   0xE006             B.N      ??LPLD_FlexBus_Init_15
    156            }else if(justied==0 && size == 0x01)
   \                     ??LPLD_FlexBus_Init_16:
   \   0000023E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000240   0x2A00             CMP      R2,#+0
   \   00000242   0xD103             BNE.N    ??LPLD_FlexBus_Init_15
   \   00000244   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000246   0x2901             CMP      R1,#+1
   \   00000248   0xD100             BNE.N    ??LPLD_FlexBus_Init_15
    157            {
    158              n=8;
   \   0000024A   0x2308             MOVS     R3,#+8
    159            }
    160            if(n!=0)
   \                     ??LPLD_FlexBus_Init_15:
   \   0000024C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000024E   0x2B00             CMP      R3,#+0
   \   00000250   0xD00F             BEQ.N    ??LPLD_FlexBus_Init_17
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \   00000252   0x201F             MOVS     R0,#+31
   \   00000254   0xE007             B.N      ??LPLD_FlexBus_Init_18
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_19:
   \   00000256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000258   0x4914             LDR.N    R1,??LPLD_FlexBus_Init_0+0x20
   \   0000025A   0xF851 0x4020      LDR      R4,[R1, R0, LSL #+2]
    165                *pcr = PORT_PCR_MUX(5);    
   \   0000025E   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000262   0x6021             STR      R1,[R4, #+0]
    166              }
   \   00000264   0x1E40             SUBS     R0,R0,#+1
   \                     ??LPLD_FlexBus_Init_18:
   \   00000266   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000268   0xF1D3 0x011F      RSBS     R1,R3,#+31
   \   0000026C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000026E   0x4281             CMP      R1,R0
   \   00000270   0xDBF1             BLT.N    ??LPLD_FlexBus_Init_19
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??LPLD_FlexBus_Init_17:
   \   00000272   0x480F             LDR.N    R0,??LPLD_FlexBus_Init_0+0x24  ;; 0x4004a04c
   \   00000274   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000278   0x6001             STR      R1,[R0, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \   0000027A   0x480E             LDR.N    R0,??LPLD_FlexBus_Init_0+0x28  ;; 0x4004b02c
   \   0000027C   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000280   0x6001             STR      R1,[R0, #+0]
    172                        
    173            return 1;
   \   00000282   0x2001             MOVS     R0,#+1
   \   00000284   0xE8BD 0x03F0      POP      {R4-R9}
   \   00000288   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FlexBus_Init_0:
   \   0000028C   0x4000C000         DC32     0x4000c000
   \   00000290   0x4004C004         DC32     0x4004c004
   \   00000294   0x4000C060         DC32     0x4000c060
   \   00000298   0x4004C000         DC32     0x4004c000
   \   0000029C   0x4004B048         DC32     0x4004b048
   \   000002A0   0x4004B04C         DC32     0x4004b04c
   \   000002A4   0x4004B044         DC32     0x4004b044
   \   000002A8   0x4004B040         DC32     0x4004b040
   \   000002AC   0x........         DC32     FB_PORT
   \   000002B0   0x4004A04C         DC32     0x4004a04c
   \   000002B4   0x4004B02C         DC32     0x4004b02c
    174          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       44  LPLD_FlexBus_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  FB_PORT
     696  LPLD_FlexBus_Init

 
 128 bytes in section .data
 696 bytes in section .text
 
 696 bytes of CODE memory
 128 bytes of DATA memory

Errors: none
Warnings: none
